/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * BackendForFrontend
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
export interface WeatherForecast {
  date?: string;
  summary?: string | null;
  temperatureC?: number;
  readonly temperatureF?: number;
}



type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




      
export const getApiProducts = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string[]>> => {
    
    return axios.get(
      `/api/Products`,options
    );
  }


export const getGetApiProductsQueryKey = () => {
    return [`/api/Products`] as const;
    }

    
export const getGetApiProductsQueryOptions = <TData = Awaited<ReturnType<typeof getApiProducts>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProducts>>> = ({ signal }) => getApiProducts({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiProductsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProducts>>>
export type GetApiProductsQueryError = AxiosError<unknown>

export const useGetApiProducts = <TData = Awaited<ReturnType<typeof getApiProducts>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiProductsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiProducts = (
    postApiProductsBody: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.post(
      `/api/Products`,
      postApiProductsBody,options
    );
  }



export const getPostApiProductsMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProducts>>, TError,{data: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiProducts>>, TError,{data: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiProducts>>, {data: string}> = (props) => {
          const {data} = props ?? {};

          return  postApiProducts(data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiProductsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiProducts>>>
    export type PostApiProductsMutationBody = string
    export type PostApiProductsMutationError = AxiosError<unknown>

    export const usePostApiProducts = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProducts>>, TError,{data: string}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPostApiProductsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiProductsId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    
    return axios.get(
      `/api/Products/${id}`,options
    );
  }


export const getGetApiProductsIdQueryKey = (id: number,) => {
    return [`/api/Products/${id}`] as const;
    }

    
export const getGetApiProductsIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiProductsId>>, TError = AxiosError<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiProductsId>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProductsId>>> = ({ signal }) => getApiProductsId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiProductsId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiProductsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProductsId>>>
export type GetApiProductsIdQueryError = AxiosError<unknown>

export const useGetApiProductsId = <TData = Awaited<ReturnType<typeof getApiProductsId>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiProductsId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiProductsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putApiProductsId = (
    id: number,
    putApiProductsIdBody: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.put(
      `/api/Products/${id}`,
      putApiProductsIdBody,options
    );
  }



export const getPutApiProductsIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiProductsId>>, TError,{id: number;data: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiProductsId>>, TError,{id: number;data: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiProductsId>>, {id: number;data: string}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiProductsId(id,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutApiProductsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiProductsId>>>
    export type PutApiProductsIdMutationBody = string
    export type PutApiProductsIdMutationError = AxiosError<unknown>

    export const usePutApiProductsId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiProductsId>>, TError,{id: number;data: string}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPutApiProductsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiProductsId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/Products/${id}`,options
    );
  }



export const getDeleteApiProductsIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiProductsId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiProductsId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiProductsId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiProductsId(id,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiProductsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiProductsId>>>
    
    export type DeleteApiProductsIdMutationError = AxiosError<unknown>

    export const useDeleteApiProductsId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiProductsId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getDeleteApiProductsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getWeatherForecast = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WeatherForecast[]>> => {
    
    return axios.get(
      `/WeatherForecast`,options
    );
  }


export const getGetWeatherForecastQueryKey = () => {
    return [`/WeatherForecast`] as const;
    }

    
export const getGetWeatherForecastQueryOptions = <TData = Awaited<ReturnType<typeof getWeatherForecast>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWeatherForecast>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWeatherForecastQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWeatherForecast>>> = ({ signal }) => getWeatherForecast({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWeatherForecast>>, TError, TData> & { queryKey: QueryKey }
}

export type GetWeatherForecastQueryResult = NonNullable<Awaited<ReturnType<typeof getWeatherForecast>>>
export type GetWeatherForecastQueryError = AxiosError<unknown>

export const useGetWeatherForecast = <TData = Awaited<ReturnType<typeof getWeatherForecast>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWeatherForecast>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetWeatherForecastQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




