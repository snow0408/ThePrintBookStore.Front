/**
 * Generated by orval v6.26.0 üç∫
 * Do not edit manually.
 * BackendForFrontend
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

axios.defaults.baseURL = "https://localhost:7236";
export type PatchApiUsedBooksIdBody = {
  ImageFile?: Blob;
  Price?: number;
};

export type PostApiUsedBooksBody = {
  Authors?: string[];
  BookName?: string;
  BookStatus?: string;
  CategoryId?: number;
  CategoryName?: string;
  Description?: string;
  Id?: number;
  ImageFile?: Blob;
  "ImageLinks.SmallPicture"?: string;
  "ImageLinks.SmallThumbnailPicture"?: string;
  "ImageLinks.ThumbnailPicture"?: string;
  ISBN?: string;
  IsDeleted?: boolean;
  MemberEmail?: string;
  MemberId?: number;
  Picture?: string;
  Price?: number;
  ProductStatus?: boolean;
  PublishDate?: string;
  PublisherName?: string;
  ReleaseDate?: string;
  WebReaderLink?: string;
};

export type PostApiUsedBookOrdersCreateApiParams = {
  buyerId?: number;
  fee?: number;
  method?: string;
  paymentNumber?: string;
  paymentAmount?: number;
};

export type PutApiUsedBookOrdersApiParams = {
  Id?: number;
  status?: string;
};

export type GetApiUsedBookOrdersApiParams = {
  memberId?: number;
  type?: string;
};

export type GetApiUsedBookOrderDetailsParams = {
  orderId?: number;
};

export type GetApiUsedBookCartsApiParams = {
  memberId?: number;
};

export type PostApiUsedBookBuyerInfomationsApiOrderRecipientParams = {
  paymentId?: string;
};

export type GetApiUsedBookBuyerInfomationsApiParams = {
  orderId?: number;
};

export type GetApiProductsParams = {
  Keyword?: string;
  BookSearch?: number;
  PhysicalBook?: string;
  EBook?: string;
  PriceRangeStart?: number;
  PriceRangeEnd?: number;
  ProductDetailsCategoryId?: number;
  Page?: number;
  pageSize?: number;
};

export type GetApiLinePayCancelParams = {
  transactionId?: string;
};

export type PostApiLinePayConfirmParams = {
  transactionId?: string;
  orderId?: string;
};

export type PostGentokenParams = {
  username?: string;
};

export type PostApiEmailSendAAAParams = {
  email?: string;
};

export type PostAddPayInfoIdBody = {
  PayInfo?: StringStringValuesKeyValuePair[];
};

export type PutApiCartsDetailsIdParams = {
  quantity?: number;
};

export type PostApiCartsDetailsParams = {
  memberId?: number;
  productId?: number;
};

export type GetApiCartsDetailsParams = {
  Id?: number;
};

export type PutTotalAmountIdParams = {
  totalAmount?: number;
};

export interface WriteBookReview {
  book?: Product;
  bookID?: number;
  id?: number;
  member?: Member;
  memberID?: number;
  /** @minLength 1 */
  reviewContent: string;
  reviewDate?: string;
  reviewRating?: number;
}

export interface VerifyCodeDto {
  /** @nullable */
  code?: string | null;
  /** @nullable */
  email?: string | null;
}

export interface UsedBooksLogisticsOrder {
  /** @nullable */
  actualDeliveryDate?: string | null;
  estimateDeliveryDate?: string;
  id?: number;
  /**
   * @minLength 0
   * @maxLength 50
   */
  logisticsCompany: string;
  order?: UsedBooksOrder;
  orderID?: number;
  /**
   * @minLength 0
   * @maxLength 50
   */
  pickupMethod: string;
  /**
   * @minLength 0
   * @maxLength 50
   */
  recipientAddress: string;
  /**
   * @minLength 0
   * @maxLength 50
   */
  recipientName: string;
  /**
   * @minLength 0
   * @maxLength 50
   */
  recipientPhone: string;
  /**
   * @minLength 0
   * @maxLength 50
   */
  senderAddress: string;
  /**
   * @minLength 0
   * @maxLength 50
   */
  senderName: string;
  /**
   * @minLength 0
   * @maxLength 50
   */
  senderPhone: string;
  /**
   * @minLength 0
   * @maxLength 50
   */
  trackingNumber: string;
}

export interface UsedBooksOrder {
  buyer?: Member;
  buyerId?: number;
  id?: number;
  orderDate?: string;
  /**
   * @minLength 0
   * @maxLength 50
   * @nullable
   */
  paymentMethod?: string | null;
  seller?: Member;
  sellerId?: number;
  shippingFee?: number;
  /**
   * @minLength 0
   * @maxLength 50
   */
  status: string;
  totalAmount?: number;
  /** @nullable */
  usedBooksAllocationRecords?: UsedBooksAllocationRecord[] | null;
  /** @nullable */
  usedBooksLogisticsOrders?: UsedBooksLogisticsOrder[] | null;
  /** @nullable */
  usedBooksOrderDetails?: UsedBooksOrderDetail[] | null;
}

export interface UsedBooksCart {
  addToCartDate?: string;
  book?: UsedBook;
  bookID?: number;
  id?: number;
  member?: Member;
  memberID?: number;
}

export interface UsedBooksAllocationRecord {
  /**
   * @minLength 0
   * @maxLength 50
   */
  allocationAccount: string;
  allocationAmount?: number;
  id?: number;
  member?: Member;
  memberID?: number;
  order?: UsedBooksOrder;
  orderID?: number;
  platformShareAmount?: number;
}

export interface UsedBookOrderDto {
  buyerId?: number;
  /** @nullable */
  buyerName?: string | null;
  id?: number;
  orderDate?: string;
  /** @nullable */
  paymentMethod?: string | null;
  sellerId?: number;
  /** @nullable */
  sellerName?: string | null;
  shippingFee?: number;
  /** @nullable */
  status?: string | null;
  totalAmount?: number;
}

export interface UsedBookOrderDetailDto {
  bookID?: number;
  /** @nullable */
  bookName?: string | null;
  id?: number;
  orderID?: number;
  unitPrice?: number;
}

export interface UsedBookDto {
  /** @nullable */
  authors?: string[] | null;
  /** @nullable */
  bookStatus?: string | null;
  categoryId?: number;
  /** @nullable */
  description?: string | null;
  id?: number;
  /** @nullable */
  identifier?: string | null;
  /** @nullable */
  imageFile?: Blob | null;
  imageLinks?: ImageLinksDto;
  isDeleted?: boolean;
  /** @nullable */
  kind?: string | null;
  /** @nullable */
  memberEmail?: string | null;
  memberId?: number;
  /** @nullable */
  picture?: string | null;
  price?: number;
  productStatus?: boolean;
  /** @nullable */
  publishedDate?: string | null;
  /** @nullable */
  publisher?: string | null;
  releaseDate?: string;
  /** @nullable */
  title?: string | null;
  /** @nullable */
  webReaderLink?: string | null;
}

export interface UsedBookCartsDto {
  bookID?: number;
  /** @nullable */
  bookStatus?: string | null;
  id?: number;
  /** @nullable */
  name?: string | null;
  /** @nullable */
  picture?: string | null;
  productStatus?: boolean;

  sellerID?: number;

  sellerName?: string | null;
  unitPrice?: number;
}

export interface UsedBookBuyerInformation {
  id?: number;
  orderId: string;
  recipientAddress: string;
  recipientEmail?: string | null;
  recipientName: string;
  recipientPhone: string;
  remark?: string | null;
}

export interface UsedBook {
  /**
   * @minLength 0
   * @maxLength 50
   * @nullable
   */
  authors?: string | null;
  /**
   * @minLength 0
   * @maxLength 500
   */
  bookStatus: string;
  category?: Category;
  categoryId?: number;
  /** @nullable */
  description?: string | null;
  id?: number;
  /**
   * @minLength 0
   * @maxLength 50
   */
  isbn: string;
  isDeleted?: boolean;
  member?: Member;
  memberId?: number;
  /**
   * @minLength 0
   * @maxLength 50
   */
  name: string;
  /**
   * @minLength 0
   * @maxLength 500
   * @nullable
   */
  picture?: string | null;
  price?: number;
  productStatus?: boolean;
  /** @nullable */
  publishDate?: string | null;
  /**
   * @minLength 0
   * @maxLength 50
   * @nullable
   */
  publisherName?: string | null;
  releaseDate?: string;
  /**
   * @minLength 0
   * @maxLength 500
   * @nullable
   */
  smallPicture?: string | null;
  /**
   * @minLength 0
   * @maxLength 500
   * @nullable
   */
  smallThumbnailPicture?: string | null;
  /**
   * @minLength 0
   * @maxLength 500
   * @nullable
   */
  thumbnailPicture?: string | null;
  /** @nullable */
  usedBooksCarts?: UsedBooksCart[] | null;
  /** @nullable */
  usedBooksOrderDetails?: UsedBooksOrderDetail[] | null;
  /** @nullable */
  webReaderLink?: string | null;
}

export interface UsedBooksOrderDetail {
  book?: UsedBook;
  bookID?: number;
  id?: number;
  order?: UsedBooksOrder;
  orderID?: number;
  unitPrice?: number;
}

export interface StringStringValuesKeyValuePair {
  /** @nullable */
  key?: string | null;
  value?: string[];
}

export interface ShippingAddressRecipientDto {
  /** @nullable */
  email?: string | null;
  /** @nullable */
  firstName?: string | null;
  /** @nullable */
  firstNameOptional?: string | null;
  /** @nullable */
  lastName?: string | null;
  /** @nullable */
  lastNameOptional?: string | null;
  /** @nullable */
  phoneNo?: string | null;
  /** @nullable */
  type?: string | null;
}

export interface ShippingAddressDto {
  /** @nullable */
  city?: string | null;
  /** @nullable */
  country?: string | null;
  /** @nullable */
  detail?: string | null;
  /** @nullable */
  optional?: string | null;
  /** @nullable */
  postalCode?: string | null;
  recipient?: ShippingAddressRecipientDto;
  /** @nullable */
  state?: string | null;
}

export interface Return {
  id?: number;
  logisticsOrder?: LogisticsOrder;
  logisticsOrderId?: number;
  member?: Member;
  memberId?: number;
  order?: Order;
  orderId?: number;
  processdDate?: string;
  quantity?: number;
  returnDate?: string;
  /**
   * @minLength 0
   * @maxLength 50
   */
  returnReason: string;
  /**
   * @minLength 0
   * @maxLength 50
   */
  status: string;
}

export interface ResponsePaymentUrlDto {
  /** @nullable */
  app?: string | null;
  /** @nullable */
  web?: string | null;
}

export interface ResponseInfoDto {
  /** @nullable */
  paymentAccessToken?: string | null;
  paymentUrl?: ResponsePaymentUrlDto;
  transactionId?: number;
}

export interface ResetPasswordDto {
  /** @nullable */
  newPassword?: string | null;
  /** @nullable */
  token?: string | null;
}

export interface Refund {
  amount?: number;
  applicationDate?: string;
  id?: number;
  order?: Order;
  orderId?: number;
  /**
   * @minLength 0
   * @maxLength 50
   */
  refundStatus: string;
}

export interface RedirectUrlsDto {
  /** @nullable */
  cancelUrl?: string | null;
  /** @nullable */
  confirmUrl?: string | null;
}

export interface QtyflawBook {
  book?: Product;
  bookID?: number;
  /**
   * @minLength 0
   * @maxLength 50
   */
  handler: string;
  handlingDate?: string;
  /**
   * @minLength 0
   * @maxLength 50
   */
  handlingMethod: string;
  id?: number;
  /**
   * @minLength 0
   * @maxLength 100
   */
  reason: string;
  /**
   * @minLength 0
   * @maxLength 50
   */
  status: string;
}

export interface QtyBookInventory {
  buyPrice?: number;
  id?: number;
  product?: Product;
  productId?: number;
  /** @nullable */
  remark?: string | null;
  /**
   * @minLength 0
   * @maxLength 50
   */
  state: string;
  totalQty?: number;
}

export interface Promotion {
  /** @nullable */
  coupons?: Coupon[] | null;
  endDate?: string;
  promotionId?: number;
  /** @nullable */
  promotionName?: string | null;
  startDate?: string;
  /** @nullable */
  type?: string | null;
}

export interface ProductsPagingDto {
  productDetailsCategories?: ProductDetailsCategoryDto[] | null;
  productsReslut?: BookProductDto[] | null;
  totalPages?: number;
}

export interface ProductPicture {
  displayOrder?: number;
  id?: number;
  name: string;
  product?: Product;
  productId?: number;
}

export interface ProductKeywordDto {
  id?: number;
  keywordId?: number;
  /** @nullable */
  keywordName?: string | null;
  productId?: number;
}

export interface ProductDetailsCategoryDto {
  id?: number;
  /** @nullable */
  name?: string | null;
}


export interface ProductsPagingDto {
  /** @nullable */
  productDetailsCategories?: ProductDetailsCategoryDto[] | null;
  /** @nullable */
  productsReslut?: BookProductDto[] | null;
  totalPages?: number;
}


export interface Product {
  /** @nullable */
  analyzeOneBooks?: AnalyzeOneBook[] | null;
  /** @nullable */
  analyzeSales?: AnalyzeSale[] | null;
  /** @nullable */
  analyzeUserInteractions?: AnalyzeUserInteraction[] | null;
  /** @nullable */
  bookProducts?: BookProduct[] | null;
  /** @nullable */
  cartDetails?: CartDetail[] | null;
  /** @minLength 1 */
  category: string;
  /** @minLength 1 */
  description: string;
  detailsCategory?: ProductDetailsCategory;
  /** @nullable */
  detailsCategoryId?: number | null;
  /** @nullable */
  discountDegree?: number | null;
  /** @nullable */
  eBooks?: EBook[] | null;
  id?: number;
  /**
   * @minLength 0
   * @maxLength 100
   */
  name: string;
  /** @nullable */
  offer?: number | null;
  /** @nullable */
  orderDetails?: OrderDetail[] | null;
  /** @nullable */
  pdInStocks?: PdInStock[] | null;
  price?: number;
  /** @nullable */
  productKeywords?: ProductKeyword[] | null;
  /** @nullable */
  productPictures?: ProductPicture[] | null;
  /**
   * @minLength 0
   * @maxLength 50
   */
  productStatus: string;
  /** @nullable */
  qtyBookInventories?: QtyBookInventory[] | null;
  /** @nullable */
  qtyflawBooks?: QtyflawBook[] | null;
  /** @nullable */
  realPrice?: number | null;
  stock?: number;
  /** @nullable */
  writeBookReviews?: WriteBookReview[] | null;
}


export interface ProductPicture {
  displayOrder?: number;
  id?: number;
  /**
   * @minLength 0
   * @maxLength 50
   */
  name: string;
  product?: Product;
  productId?: number;
}


export interface ProductKeyword {
  id?: number;
  keyword?: Keyword;
  keywordId?: number;
  product?: Product;
  productId?: number;
}

export interface ProductDetailsCategory {
  /** @nullable */
  discountDegree?: number | null;
  id?: number;
  /**
   * @minLength 0
   * @maxLength 50
   */
  name: string;
  /** @nullable */
  products?: Product[] | null;
}

export interface PointsHistory {
  changeDate?: string;
  /**
   * @minLength 0
   * @maxLength 50
   */
  changeReason: string;
  id?: number;
  member?: Member;
  memberId?: number;
  pointChange?: number;
}

export interface PdInStock {
  buyDate?: string;
  buyPrice?: number;
  id?: number;
  product?: Product;
  productId?: number;
  qty?: number;
  supplier?: Bookseller;
  /** @nullable */
  supplierID?: number | null;
}

export interface PaymentResponseDto {
  info?: ResponseInfoDto;
  /** @nullable */
  returnCode?: string | null;
  /** @nullable */
  returnMessage?: string | null;
}

export interface PaymentConfirmResponseDto {
  info?: ConfirmResponseInfoDto;
  /** @nullable */
  returnCode?: string | null;
  /** @nullable */
  returnMessage?: string | null;
}

export interface PaymentConfirmDto {
  amount?: number;
  /** @nullable */
  currency?: string | null;
}

export interface PackageDto {
  amount?: number;
  /** @nullable */
  id?: string | null;
  /** @nullable */
  name?: string | null;
  /** @nullable */
  products?: LinePayProductDto[] | null;
}

export interface PaymentRequestDto {
  amount?: number;
  /** @nullable */
  currency?: string | null;
  /** @nullable */
  orderId?: string | null;
  /** @nullable */
  packages?: PackageDto[] | null;
  redirectUrls?: RedirectUrlsDto;
}

export interface PackageDto {
  amount?: number;
  id?: string | null;
  name?: string | null;
  products?: LinePayProductDto[] | null;
}

export interface OrdersDto {
  /** @nullable */
  address?: string | null;
  /** @nullable */
  discountAmount?: number | null;
  id?: number | null;
  memberId?: number;
  /** @nullable */
  memberName?: string | null;
  /** @nullable */
  message?: string | null;
  orderDate?: string;
  /** @nullable */
  paymentMethod?: string | null;
  /** @nullable */
  phone?: string | null;
  /** @nullable */
  status?: string | null;
  totalAmount?: number;
}

export interface OrderDetailsDto {
  orderId?: number | null;
  price?: number | null;
  productId?: number;
  /** @nullable */
  productName?: string | null;
  quantity?: number;
  unitPrice?: number;
}

export interface OrderDetail {
  id?: number;
  order?: Order;
  orderId?: number;
  product?: Product;
  productId?: number;
  quantity?: number;
  unitPrice?: number;
}

export interface OrderCreationDto {

  orderDetailsDto?: CartDetailsDto[] | null;

  ordersDto?: OrdersDto;
}

export interface News {
  /**
   * @minLength 0
   * @maxLength 50
   * @nullable
   */
  category?: string | null;
  /** @minLength 1 */
  content: string;
  employee?: Employee;
  employeeID?: number;
  /**
   * @minLength 0
   * @maxLength 50
   * @nullable
   */
  newsID?: string | null;
  publishTime?: string;
  /**
   * @minLength 0
   * @maxLength 50
   */
  title: string;
}

export interface MemberRegistrationDto {
  /** @nullable */
  address?: string | null;
  dateOfBirth?: string;
  /** @nullable */
  email?: string | null;
  gender?: boolean;
  /** @nullable */
  name?: string | null;
  /** @nullable */
  password?: string | null;
  /** @nullable */
  phoneNumber?: string | null;
}

export interface MemberLoginRequest {
  /** @nullable */
  cacheKey?: string | null;
  /** @nullable */
  captcha?: string | null;
  /** @nullable */
  email?: string | null;
  /** @nullable */
  password?: string | null;
}

export interface MemberDto {
  /** @nullable */
  address?: string | null;
  dateOfBirth?: string;
  /** @nullable */
  email?: string | null;
  id?: number;
  /** @nullable */
  name?: string | null;
  /** @nullable */
  phoneNumber?: string | null;
}

export interface Member {
  /**
   * @minLength 0
   * @maxLength 50
   */
  address: string;
  /** @nullable */
  analyzeUserInteractions?: AnalyzeUserInteraction[] | null;
  /** @nullable */
  bookReviews?: BookReview[] | null;
  cart?: Cart;
  createdAt?: string;
  dateOfBirth?: string;
  /** @nullable */
  eBooksPermissions?: EBooksPermission[] | null;
  /**
   * @minLength 0
   * @maxLength 50
   */
  email: string;
  emailVerified?: boolean;
  /** @nullable */
  favorites?: Favorite[] | null;
  gender?: boolean;
  id?: number;
  /**
   * @minLength 0
   * @maxLength 50
   */
  membersLevel: string;
  /**
   * @minLength 0
   * @maxLength 50
   */
  name: string;
  /** @nullable */
  orders?: Order[] | null;
  /**
   * @minLength 0
   * @maxLength 50
   */
  password: string;
  /**
   * @minLength 0
   * @maxLength 50
   */
  phoneNumber: string;
  points?: number;
  /** @nullable */
  pointsHistories?: PointsHistory[] | null;
  /**
   * @minLength 0
   * @maxLength 256
   * @nullable
   */
  resetToken?: string | null;
  /** @nullable */
  resetTokenExpiration?: string | null;
  /** @nullable */
  returns?: Return[] | null;
  /** @nullable */
  usedBooks?: UsedBook[] | null;
  /** @nullable */
  usedBooksAllocationRecords?: UsedBooksAllocationRecord[] | null;
  /** @nullable */
  usedBooksCarts?: UsedBooksCart[] | null;
  /** @nullable */
  usedBooksOrderBuyers?: UsedBooksOrder[] | null;
  /** @nullable */
  usedBooksOrderSellers?: UsedBooksOrder[] | null;
  /**
   * @minLength 0
   * @maxLength 6
   * @nullable
   */
  verificationCode?: string | null;
  /** @nullable */
  verificationCodeExpiration?: number | null;
  /** @nullable */
  writeBookReviews?: WriteBookReview[] | null;
}

export interface LogisticsOrder {
  actualDeliveryDate?: string;
  estimatedDeliveryDate?: string;
  id?: number;
  order?: Order;
  orderId?: number;
  /**
   * @minLength 0
   * @maxLength 50
   */
  recipientAddress: string;
  /**
   * @minLength 0
   * @maxLength 50
   */
  recipientName: string;
  /**
   * @minLength 0
   * @maxLength 50
   */
  recipientPhone: string;
  /** @nullable */
  returns?: Return[] | null;
  /**
   * @minLength 0
   * @maxLength 50
   */
  trackingNumber: string;
}

export interface Order {
  /** @nullable */
  address?: string | null;
  /** @nullable */
  discountAmount?: number | null;
  id?: number;
  /** @nullable */
  logisticsOrders?: LogisticsOrder[] | null;
  member?: Member;
  memberId?: number;
  /** @nullable */
  message?: string | null;
  orderDate?: string;
  /** @nullable */
  orderDetails?: OrderDetail[] | null;
  /**
   * @minLength 0
   * @maxLength 50
   */
  paymentMethod: string;
  /**
   * @minLength 0
   * @maxLength 10
   * @nullable
   */
  phone?: string | null;
  /** @nullable */
  refunds?: Refund[] | null;
  /** @nullable */
  returns?: Return[] | null;
  /**
   * @minLength 0
   * @maxLength 50
   */
  status: string;
  totalAmount?: number;
}

export interface LinePayProductDto {
  /** @nullable */
  name?: string | null;
  price?: number;
  quantity?: number;
}

export interface Keyword {
  id?: number;
  /**
   * @minLength 0
   * @maxLength 50
   */
  name: string;
  /** @nullable */
  productKeywords?: ProductKeyword[] | null;
}

export interface ImageLinksDto {
  /** @nullable */
  small?: string | null;
  /** @nullable */
  smallThumbnail?: string | null;
  /** @nullable */
  thumbnail?: string | null;
}

export type HttpStatusCode =
  (typeof HttpStatusCode)[keyof typeof HttpStatusCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HttpStatusCode = {
  NUMBER_100: 100,
  NUMBER_101: 101,
  NUMBER_102: 102,
  NUMBER_103: 103,
  NUMBER_200: 200,
  NUMBER_201: 201,
  NUMBER_202: 202,
  NUMBER_203: 203,
  NUMBER_204: 204,
  NUMBER_205: 205,
  NUMBER_206: 206,
  NUMBER_207: 207,
  NUMBER_208: 208,
  NUMBER_226: 226,
  NUMBER_300: 300,
  NUMBER_301: 301,
  NUMBER_302: 302,
  NUMBER_303: 303,
  NUMBER_304: 304,
  NUMBER_305: 305,
  NUMBER_306: 306,
  NUMBER_307: 307,
  NUMBER_308: 308,
  NUMBER_400: 400,
  NUMBER_401: 401,
  NUMBER_402: 402,
  NUMBER_403: 403,
  NUMBER_404: 404,
  NUMBER_405: 405,
  NUMBER_406: 406,
  NUMBER_407: 407,
  NUMBER_408: 408,
  NUMBER_409: 409,
  NUMBER_410: 410,
  NUMBER_411: 411,
  NUMBER_412: 412,
  NUMBER_413: 413,
  NUMBER_414: 414,
  NUMBER_415: 415,
  NUMBER_416: 416,
  NUMBER_417: 417,
  NUMBER_421: 421,
  NUMBER_422: 422,
  NUMBER_423: 423,
  NUMBER_424: 424,
  NUMBER_426: 426,
  NUMBER_428: 428,
  NUMBER_429: 429,
  NUMBER_431: 431,
  NUMBER_451: 451,
  NUMBER_500: 500,
  NUMBER_501: 501,
  NUMBER_502: 502,
  NUMBER_503: 503,
  NUMBER_504: 504,
  NUMBER_505: 505,
  NUMBER_506: 506,
  NUMBER_507: 507,
  NUMBER_508: 508,
  NUMBER_510: 510,
  NUMBER_511: 511,
} as const;

export interface GroupFunction {
  /** @nullable */
  groups?: GroupPermission[] | null;
  id?: number;
  /**
   * @minLength 0
   * @maxLength 50
   */
  name: string;
}

export interface ForgotPasswordDto {
  /** @nullable */
  email?: string | null;
}

export interface Favorite {
  favoriteID?: number;
  /** @nullable */
  itemID?: number | null;
  member?: Member;
  /** @nullable */
  memberID?: number | null;
}

export interface EmployeeLoginRequest {
  /** @nullable */
  account?: string | null;
  /** @nullable */
  password?: string | null;
}

export interface Employee {
  /**
   * @minLength 0
   * @maxLength 50
   */
  account: string;
  /**
   * @minLength 0
   * @maxLength 50
   */
  address: string;
  /** @nullable */
  articles?: Article[] | null;
  /**
   * @minLength 0
   * @maxLength 50
   */
  email: string;
  emailVerified?: boolean;
  gender?: boolean;
  group?: GroupPermission;
  groupId?: number;
  id?: number;
  /**
   * @minLength 0
   * @maxLength 50
   */
  name: string;
  /** @nullable */
  news?: News[] | null;
  /**
   * @minLength 0
   * @maxLength 50
   */
  password: string;
  /**
   * @minLength 0
   * @maxLength 50
   */
  phoneNumber: string;
  /**
   * @minLength 0
   * @maxLength 50
   * @nullable
   */
  position?: string | null;
  /**
   * @minLength 0
   * @maxLength 6
   * @nullable
   */
  verificationCode?: string | null;
  /** @nullable */
  verificationCodeExpiration?: string | null;
}

export interface GroupPermission {

  employees?: Employee[] | null;
  functions?: GroupFunction[] | null;

  groupName: string;
  id?: number;
}

export interface EBook {
  /** @nullable */
  eBooksPermissions?: EBooksPermission[] | null;
  /**
   * @minLength 0
   * @maxLength 500
   */
  fileLink: string;
  id?: number;
  product?: Product;
  productId?: number;
  /**
   * @minLength 0
   * @maxLength 500
   */
  sample: string;
}

export interface EBooksPermission {
  book?: EBook;
  bookID?: number;
  createDate?: string;
  id?: number;
  member?: Member;
  memberID?: number;
  /**
   * @minLength 0
   * @maxLength 50
   * @nullable
   */
  permissionType?: string | null;
}

export interface CouponRedemption {
  coupon?: Coupon;
  couponId?: number;
  memberId?: number;
  redemptionDate?: string;
  usageId?: number;
}

export interface CouponDTO {
  availabilityCount?: number;
  /** @nullable */
  code?: string | null;
  couponId?: number;
  /** @nullable */
  couponRedemptions?: CouponRedemption[] | null;
  /** @nullable */
  description?: string | null;
  discountLimit?: number;
  discountValue?: number;
  endDate?: string;
  minimumValue?: number;
  promotion?: Promotion;
  startDate?: string;
  /** @nullable */
  usingStatus?: string | null;
  valid?: boolean;
}

export interface CouponCreateDTO {
  availabilityCount?: number;
  /** @nullable */
  code?: string | null;
  /** @nullable */
  couponRedemptions?: CouponRedemption[] | null;
  /** @nullable */
  description?: string | null;
  discountLimit?: number;
  discountValue?: number;
  endDate?: string;
  minimumValue?: number;
  promotion?: Promotion;
  startDate?: string;
  /** @nullable */
  usingStatus?: string | null;
  valid?: boolean;
}

export interface Coupon {
  availabilityCount?: number;
  /** @nullable */
  code?: string | null;
  couponId?: number;
  /** @nullable */
  couponRedemptions?: CouponRedemption[] | null;
  /** @nullable */
  description?: string | null;
  discountLimit?: number;
  discountValue?: number;
  endDate?: string;
  minimumValue?: number;
  promotion?: Promotion;
  promotionId?: number;
  startDate?: string;
  /** @nullable */
  usingStatus?: string | null;
  valid?: boolean;
}

export interface CouponAPIResponse {
  /** @nullable */
  errorMessages?: string[] | null;
  isSuccess?: boolean;
  result?: Coupon;
  statusCode?: HttpStatusCode;
}

export interface ConfirmResponseShippingOptionsDto {
  address?: ShippingAddressDto;
  feeAmount?: number;
  /** @nullable */
  methodId?: string | null;
}

export interface ConfirmResponsePackageDto {
  amount?: number;
  /** @nullable */
  id?: string | null;
  userFeeAmount?: number;
}

export interface ConfirmResponsePayInfoDto {
  amount?: number;
  /** @nullable */
  creditCardBrand?: string | null;
  /** @nullable */
  creditCardNickname?: string | null;
  /** @nullable */
  maskedCreditCardNumber?: string | null;
  /** @nullable */
  method?: string | null;
  /** @nullable */
  packages?: ConfirmResponsePackageDto[] | null;
  shipping?: ConfirmResponseShippingOptionsDto;
}

export interface ConfirmResponseInfoDto {
  /** @nullable */
  authorizationExpireDate?: string | null;
  /** @nullable */
  orderId?: string | null;
  /** @nullable */
  payInfo?: ConfirmResponsePayInfoDto[] | null;
  /** @nullable */
  regKey?: string | null;
  transactionId?: number;
}

export interface CartsDto {
  /** @nullable */
  address?: string | null;
  /** @nullable */
  discountAmount?: number | null;
  id?: number;
  memberId?: number;
  /** @nullable */
  memberName?: string | null;
  /** @nullable */
  message?: string | null;
  /** @nullable */
  paymentMethod?: string | null;
  phone?: number;
  totalAmount?: number;
}

export interface CartDetailsDto {
  cartId?: number;

  id?: number | null;

  productId?: number | null;
  /** @nullable */
  productName?: string | null;
  quantity?: number;
  unitPrice?: number;
}

export interface Cart {
  /** @minLength 1 */
  address: string;
  /** @nullable */
  cartDetails?: CartDetail[] | null;
  /** @nullable */
  discountAmount?: number | null;
  id?: number;
  member?: Member;
  memberId?: number;
  /** @nullable */
  message?: string | null;
  phone?: number;
  totalAmount?: number;
}

export interface CartDetail {
  cart?: Cart;
  cartId?: number;
  id?: number;
  product?: Product;
  /** @nullable */
  productId?: number | null;
  quantity?: number;
  unitPrice?: number;
}

export interface Bookseller {
  /**
   * @minLength 0
   * @maxLength 300
   */
  address: string;
  /**
   * @minLength 0
   * @maxLength 100
   * @nullable
   */
  bankAccount?: string | null;
  /** @nullable */
  bookProducts?: BookProduct[] | null;
  /** @nullable */
  compiled?: number | null;
  /**
   * @minLength 0
   * @maxLength 50
   */
  contactPerson: string;
  id?: number;
  /**
   * @minLength 0
   * @maxLength 50
   */
  name: string;
  /** @nullable */
  pdInStocks?: PdInStock[] | null;
  /**
   * @minLength 0
   * @maxLength 50
   */
  phone: string;
}

export interface BookReview {
  /** @minLength 1 */
  content: string;
  isSpoiler?: boolean;
  member?: Member;
  memberID?: number;
  /**
   * @minLength 0
   * @maxLength 1
   * @nullable
   */
  rating?: string | null;
  reviewID?: number;
  reviewTime?: string;
}

export interface BookProductDto {
  /** @nullable */
  author?: string | null;
  bookId?: number;
  /** @nullable */
  bookLanguage?: string | null;
  /** @nullable */
  description?: string | null;
  /** @nullable */
  detailsCategoryId?: number | null;
  /** @nullable */
  detailsCategoryName?: string | null;
  /** @nullable */
  discountDegree?: number | null;
  id?: number;
  /** @nullable */
  imageUrl?: string[] | null;
  /** @nullable */
  isbn?: string | null;
  price?: number;
  /** @nullable */
  productCategory?: string | null;
  productId?: number;
  /** @nullable */
  productKeywords?: ProductKeywordDto[] | null;
  /** @nullable */
  productName?: string | null;
  /** @nullable */
  productStatus?: string | null;
  /** @nullable */
  publishDate?: string | null;
  publisherId?: number;
  /** @nullable */
  publisherName?: string | null;
  /** @nullable */
  realPrice?: number | null;
  stock?: number;
}

export interface Book {
  /**
   * @minLength 0
   * @maxLength 50
   */
  author: string;
  /** @nullable */
  bookPreviews?: BookPreview[] | null;
  /** @nullable */
  bookProducts?: BookProduct[] | null;
  category?: Category;
  categoryID?: number;
  id?: number;
  /**
   * @minLength 0
   * @maxLength 50
   */
  language: string;
  /**
   * @minLength 0
   * @maxLength 50
   */
  name: string;
}

export interface Category {
  /** @nullable */
  books?: Book[] | null;
  /** @nullable */
  discountDegree?: number | null;
  displayOrder?: number;
  id?: number;
  /**
   * @minLength 0
   * @maxLength 50
   */
  name: string;
  /** @nullable */
  usedBooks?: UsedBook[] | null;
}

export interface BookProduct {
  book?: Book;
  bookId?: number;
  id?: number;
  /**
   * @minLength 0
   * @maxLength 13
   */
  isbn: string;
  product?: Product;
  productId?: number;
  publishDate?: string;
  publisher?: Bookseller;
  publisherId?: number;
}

export interface BookPreview {
  /** @nullable */
  available?: boolean | null;
  book?: Book;
  bookId?: number;
  /** @nullable */
  previewContent?: string | null;
  previewId?: number;
  /** @nullable */
  previewLength?: number | null;
  /**
   * @minLength 0
   * @maxLength 50
   * @nullable
   */
  previewType?: string | null;
  /**
   * @minLength 0
   * @maxLength 500
   * @nullable
   */
  previewURL?: string | null;
}

export interface Article {
  articleID?: number;
  /**
   * @minLength 0
   * @maxLength 50
   * @nullable
   */
  category?: string | null;
  /** @nullable */
  content?: string | null;
  employee?: Employee;
  /** @nullable */
  employeeID?: number | null;
  /** @nullable */
  publishTime?: string | null;
  /**
   * @minLength 0
   * @maxLength 50
   */
  title: string;
}

export interface AnalyzeUserInteraction {
  book?: Product;
  bookID?: number;
  id?: number;
  interactionDate?: string;
  /**
   * @minLength 0
   * @maxLength 50
   */
  interactionType: string;
  member?: Member;
  memberID?: number;
}

export interface AnalyzeSale {
  book?: Product;
  bookID?: number;
  dateRange?: number;
  id?: number;
  quantity?: number;
  total?: number;
}

export interface AnalyzeOneBook {
  book?: Product;
  bookID?: number;
  dateRange?: number;
  id?: number;
  quantity?: number;
  salesAmount?: number;
}


export interface AddUsedBookToCartDto {
  bookID: number;
  memberID: number;

}

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const getApiCaptchaGetCaptcha = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/api/Captcha/GetCaptcha`, options);
};

export const getGetApiCaptchaGetCaptchaQueryKey = () => {
  return [`/api/Captcha/GetCaptcha`] as const;
};

export const getGetApiCaptchaGetCaptchaQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiCaptchaGetCaptcha>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiCaptchaGetCaptcha>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiCaptchaGetCaptchaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiCaptchaGetCaptcha>>
  > = ({ signal }) => getApiCaptchaGetCaptcha({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiCaptchaGetCaptcha>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiCaptchaGetCaptchaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiCaptchaGetCaptcha>>
>;
export type GetApiCaptchaGetCaptchaQueryError = AxiosError<unknown>;

export const useGetApiCaptchaGetCaptcha = <
  TData = Awaited<ReturnType<typeof getApiCaptchaGetCaptcha>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiCaptchaGetCaptcha>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiCaptchaGetCaptchaQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getApiCartsMemberId = (
  memberId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<CartsDto>> => {
  return axios.get(`/api/Carts/${memberId}`, options);
};

export const getGetApiCartsMemberIdQueryKey = (memberId: number) => {
  return [`/api/Carts/${memberId}`] as const;
};

export const getGetApiCartsMemberIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiCartsMemberId>>,
  TError = AxiosError<unknown>
>(
  memberId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiCartsMemberId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiCartsMemberIdQueryKey(memberId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiCartsMemberId>>
  > = ({ signal }) =>
    getApiCartsMemberId(memberId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!memberId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiCartsMemberId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiCartsMemberIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiCartsMemberId>>
>;
export type GetApiCartsMemberIdQueryError = AxiosError<unknown>;

export const useGetApiCartsMemberId = <
  TData = Awaited<ReturnType<typeof getApiCartsMemberId>>,
  TError = AxiosError<unknown>
>(
  memberId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiCartsMemberId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiCartsMemberIdQueryOptions(memberId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postApiCarts = (
  cartsDto: CartsDto,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.post(`/api/Carts`, cartsDto, options);
};

export const getPostApiCartsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiCarts>>,
    TError,
    { data: CartsDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiCarts>>,
  TError,
  { data: CartsDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiCarts>>,
    { data: CartsDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiCarts(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiCartsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiCarts>>
>;
export type PostApiCartsMutationBody = CartsDto;
export type PostApiCartsMutationError = AxiosError<unknown>;

export const usePostApiCarts = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiCarts>>,
    TError,
    { data: CartsDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiCarts>>,
  TError,
  { data: CartsDto },
  TContext
> => {
  const mutationOptions = getPostApiCartsMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putTotalAmountId = (
  id: number,
  params?: PutTotalAmountIdParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.put(`/totalAmount/${id}`, undefined, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getPutTotalAmountIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putTotalAmountId>>,
    TError,
    { id: number; params?: PutTotalAmountIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putTotalAmountId>>,
  TError,
  { id: number; params?: PutTotalAmountIdParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putTotalAmountId>>,
    { id: number; params?: PutTotalAmountIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return putTotalAmountId(id, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutTotalAmountIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putTotalAmountId>>
>;

export type PutTotalAmountIdMutationError = AxiosError<unknown>;

export const usePutTotalAmountId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putTotalAmountId>>,
    TError,
    { id: number; params?: PutTotalAmountIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof putTotalAmountId>>,
  TError,
  { id: number; params?: PutTotalAmountIdParams },
  TContext
> => {
  const mutationOptions = getPutTotalAmountIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiCartsId = (
  id: number,
  cart: Cart,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.put(`/api/Carts/${id}`, cart, options);
};

export const getPutApiCartsIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiCartsId>>,
    TError,
    { id: number; data: Cart },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiCartsId>>,
  TError,
  { id: number; data: Cart },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiCartsId>>,
    { id: number; data: Cart }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiCartsId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiCartsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiCartsId>>
>;
export type PutApiCartsIdMutationBody = Cart;
export type PutApiCartsIdMutationError = AxiosError<unknown>;

export const usePutApiCartsId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiCartsId>>,
    TError,
    { id: number; data: Cart },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiCartsId>>,
  TError,
  { id: number; data: Cart },
  TContext
> => {
  const mutationOptions = getPutApiCartsIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiCartsId = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/api/Carts/${id}`, options);
};

export const getDeleteApiCartsIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiCartsId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiCartsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiCartsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiCartsId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiCartsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiCartsId>>
>;

export type DeleteApiCartsIdMutationError = AxiosError<unknown>;

export const useDeleteApiCartsId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiCartsId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiCartsId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiCartsIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiCartsDetails = (
  params?: GetApiCartsDetailsParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<CartDetailsDto[]>> => {
  return axios.get(`/api/CartsDetails`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetApiCartsDetailsQueryKey = (
  params?: GetApiCartsDetailsParams
) => {
  return [`/api/CartsDetails`, ...(params ? [params] : [])] as const;
};

export const getGetApiCartsDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiCartsDetails>>,
  TError = AxiosError<unknown>
>(
  params?: GetApiCartsDetailsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiCartsDetails>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiCartsDetailsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiCartsDetails>>
  > = ({ signal }) => getApiCartsDetails(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiCartsDetails>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiCartsDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiCartsDetails>>
>;
export type GetApiCartsDetailsQueryError = AxiosError<unknown>;

export const useGetApiCartsDetails = <
  TData = Awaited<ReturnType<typeof getApiCartsDetails>>,
  TError = AxiosError<unknown>
>(
  params?: GetApiCartsDetailsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiCartsDetails>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiCartsDetailsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postApiCartsDetails = (
  params?: PostApiCartsDetailsParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.post(`/api/CartsDetails`, undefined, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getPostApiCartsDetailsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiCartsDetails>>,
    TError,
    { params?: PostApiCartsDetailsParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiCartsDetails>>,
  TError,
  { params?: PostApiCartsDetailsParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiCartsDetails>>,
    { params?: PostApiCartsDetailsParams }
  > = (props) => {
    const { params } = props ?? {};

    return postApiCartsDetails(params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiCartsDetailsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiCartsDetails>>
>;

export type PostApiCartsDetailsMutationError = AxiosError<unknown>;

export const usePostApiCartsDetails = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiCartsDetails>>,
    TError,
    { params?: PostApiCartsDetailsParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiCartsDetails>>,
  TError,
  { params?: PostApiCartsDetailsParams },
  TContext
> => {
  const mutationOptions = getPostApiCartsDetailsMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiCartsDetailsId = (
  id: number,
  params?: PutApiCartsDetailsIdParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.put(`/api/CartsDetails/${id}`, undefined, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getPutApiCartsDetailsIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiCartsDetailsId>>,
    TError,
    { id: number; params?: PutApiCartsDetailsIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiCartsDetailsId>>,
  TError,
  { id: number; params?: PutApiCartsDetailsIdParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiCartsDetailsId>>,
    { id: number; params?: PutApiCartsDetailsIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return putApiCartsDetailsId(id, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiCartsDetailsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiCartsDetailsId>>
>;

export type PutApiCartsDetailsIdMutationError = AxiosError<unknown>;

export const usePutApiCartsDetailsId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiCartsDetailsId>>,
    TError,
    { id: number; params?: PutApiCartsDetailsIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiCartsDetailsId>>,
  TError,
  { id: number; params?: PutApiCartsDetailsIdParams },
  TContext
> => {
  const mutationOptions = getPutApiCartsDetailsIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiCartsDetailsId = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/api/CartsDetails/${id}`, options);
};

export const getDeleteApiCartsDetailsIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiCartsDetailsId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiCartsDetailsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiCartsDetailsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiCartsDetailsId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiCartsDetailsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiCartsDetailsId>>
>;

export type DeleteApiCartsDetailsIdMutationError = AxiosError<unknown>;

export const useDeleteApiCartsDetailsId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiCartsDetailsId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiCartsDetailsId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiCartsDetailsIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getAllCoupon = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/api/Coupon`, options);
};

export const getGetAllCouponQueryKey = () => {
  return [`/api/Coupon`] as const;
};

export const getGetAllCouponQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllCoupon>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAllCoupon>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllCouponQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllCoupon>>> = ({
    signal,
  }) => getAllCoupon({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllCoupon>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllCouponQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllCoupon>>
>;
export type GetAllCouponQueryError = AxiosError<unknown>;

export const useGetAllCoupon = <
  TData = Awaited<ReturnType<typeof getAllCoupon>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAllCoupon>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAllCouponQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const addCoupon = (
  couponCreateDTO: CouponCreateDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<CouponDTO>> => {
  return axios.post(`/api/Coupon`, couponCreateDTO, options);
};

export const getAddCouponMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addCoupon>>,
    TError,
    { data: CouponCreateDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addCoupon>>,
  TError,
  { data: CouponCreateDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addCoupon>>,
    { data: CouponCreateDTO }
  > = (props) => {
    const { data } = props ?? {};

    return addCoupon(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddCouponMutationResult = NonNullable<
  Awaited<ReturnType<typeof addCoupon>>
>;
export type AddCouponMutationBody = CouponCreateDTO;
export type AddCouponMutationError = AxiosError<void>;

export const useAddCoupon = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addCoupon>>,
    TError,
    { data: CouponCreateDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof addCoupon>>,
  TError,
  { data: CouponCreateDTO },
  TContext
> => {
  const mutationOptions = getAddCouponMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getCouponById = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/api/Coupon/${id}`, options);
};

export const getGetCouponByIdQueryKey = (id: number) => {
  return [`/api/Coupon/${id}`] as const;
};

export const getGetCouponByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getCouponById>>,
  TError = AxiosError<CouponAPIResponse>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCouponById>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCouponByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCouponById>>> = ({
    signal,
  }) => getCouponById(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCouponById>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCouponByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCouponById>>
>;
export type GetCouponByIdQueryError = AxiosError<CouponAPIResponse>;

export const useGetCouponById = <
  TData = Awaited<ReturnType<typeof getCouponById>>,
  TError = AxiosError<CouponAPIResponse>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCouponById>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCouponByIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const updateCoupon = (
  id: number,
  couponCreateDTO: CouponCreateDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.put(`/api/Coupon/${id}`, couponCreateDTO, options);
};

export const getUpdateCouponMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCoupon>>,
    TError,
    { id: number; data: CouponCreateDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCoupon>>,
  TError,
  { id: number; data: CouponCreateDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCoupon>>,
    { id: number; data: CouponCreateDTO }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateCoupon(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCouponMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateCoupon>>
>;
export type UpdateCouponMutationBody = CouponCreateDTO;
export type UpdateCouponMutationError = AxiosError<unknown>;

export const useUpdateCoupon = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCoupon>>,
    TError,
    { id: number; data: CouponCreateDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateCoupon>>,
  TError,
  { id: number; data: CouponCreateDTO },
  TContext
> => {
  const mutationOptions = getUpdateCouponMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteCoupon = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/api/Coupon/${id}`, options);
};

export const getDeleteCouponMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCoupon>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCoupon>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCoupon>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteCoupon(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCouponMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCoupon>>
>;

export type DeleteCouponMutationError = AxiosError<unknown>;

export const useDeleteCoupon = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCoupon>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteCoupon>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteCouponMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getCouponByCode = (
  code: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/api/Coupon/${code}`, options);
};

export const getGetCouponByCodeQueryKey = (code: string) => {
  return [`/api/Coupon/${code}`] as const;
};

export const getGetCouponByCodeQueryOptions = <
  TData = Awaited<ReturnType<typeof getCouponByCode>>,
  TError = AxiosError<CouponAPIResponse>
>(
  code: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCouponByCode>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCouponByCodeQueryKey(code);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCouponByCode>>> = ({
    signal,
  }) => getCouponByCode(code, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!code,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCouponByCode>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCouponByCodeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCouponByCode>>
>;
export type GetCouponByCodeQueryError = AxiosError<CouponAPIResponse>;

export const useGetCouponByCode = <
  TData = Awaited<ReturnType<typeof getCouponByCode>>,
  TError = AxiosError<CouponAPIResponse>
>(
  code: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCouponByCode>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCouponByCodeQueryOptions(code, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postAddPayInfoId = (
  id: string,
  postAddPayInfoIdBody: PostAddPayInfoIdBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  const formData = new FormData();
  if (postAddPayInfoIdBody.PayInfo !== undefined) {
    postAddPayInfoIdBody.PayInfo.forEach((value) =>
      formData.append("PayInfo", value)
    );
  }

  return axios.post(`/AddPayInfo/${id}`, formData, options);
};

export const getPostAddPayInfoIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAddPayInfoId>>,
    TError,
    { id: string; data: PostAddPayInfoIdBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAddPayInfoId>>,
  TError,
  { id: string; data: PostAddPayInfoIdBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAddPayInfoId>>,
    { id: string; data: PostAddPayInfoIdBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return postAddPayInfoId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAddPayInfoIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAddPayInfoId>>
>;
export type PostAddPayInfoIdMutationBody = PostAddPayInfoIdBody;
export type PostAddPayInfoIdMutationError = AxiosError<unknown>;

export const usePostAddPayInfoId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAddPayInfoId>>,
    TError,
    { id: string; data: PostAddPayInfoIdBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postAddPayInfoId>>,
  TError,
  { id: string; data: PostAddPayInfoIdBody },
  TContext
> => {
  const mutationOptions = getPostAddPayInfoIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiECPayAddAccountInfo = (
  accountInfoDTO: AccountInfoDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.post(`/api/ECPay/AddAccountInfo`, accountInfoDTO, options);
};

export const getPostApiECPayAddAccountInfoMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiECPayAddAccountInfo>>,
    TError,
    { data: AccountInfoDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiECPayAddAccountInfo>>,
  TError,
  { data: AccountInfoDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiECPayAddAccountInfo>>,
    { data: AccountInfoDTO }
  > = (props) => {
    const { data } = props ?? {};

    return postApiECPayAddAccountInfo(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiECPayAddAccountInfoMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiECPayAddAccountInfo>>
>;
export type PostApiECPayAddAccountInfoMutationBody = AccountInfoDTO;
export type PostApiECPayAddAccountInfoMutationError = AxiosError<unknown>;

export const usePostApiECPayAddAccountInfo = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiECPayAddAccountInfo>>,
    TError,
    { data: AccountInfoDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiECPayAddAccountInfo>>,
  TError,
  { data: AccountInfoDTO },
  TContext
> => {
  const mutationOptions = getPostApiECPayAddAccountInfoMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiEmailSendResetPassword = (
  resetPasswordDto: ResetPasswordDto,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(`/api/EmailSend/ResetPassword`, resetPasswordDto, options);
};

export const getPostApiEmailSendResetPasswordMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiEmailSendResetPassword>>,
    TError,
    { data: ResetPasswordDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiEmailSendResetPassword>>,
  TError,
  { data: ResetPasswordDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiEmailSendResetPassword>>,
    { data: ResetPasswordDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiEmailSendResetPassword(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiEmailSendResetPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiEmailSendResetPassword>>
>;
export type PostApiEmailSendResetPasswordMutationBody = ResetPasswordDto;
export type PostApiEmailSendResetPasswordMutationError = AxiosError<unknown>;

export const usePostApiEmailSendResetPassword = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiEmailSendResetPassword>>,
    TError,
    { data: ResetPasswordDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiEmailSendResetPassword>>,
  TError,
  { data: ResetPasswordDto },
  TContext
> => {
  const mutationOptions =
    getPostApiEmailSendResetPasswordMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiEmailSendRegister = (
  memberRegistrationDto: MemberRegistrationDto,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Member>> => {
  return axios.post(`/api/EmailSend/Register`, memberRegistrationDto, options);
};

export const getPostApiEmailSendRegisterMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiEmailSendRegister>>,
    TError,
    { data: MemberRegistrationDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiEmailSendRegister>>,
  TError,
  { data: MemberRegistrationDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiEmailSendRegister>>,
    { data: MemberRegistrationDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiEmailSendRegister(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiEmailSendRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiEmailSendRegister>>
>;
export type PostApiEmailSendRegisterMutationBody = MemberRegistrationDto;
export type PostApiEmailSendRegisterMutationError = AxiosError<unknown>;

export const usePostApiEmailSendRegister = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiEmailSendRegister>>,
    TError,
    { data: MemberRegistrationDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiEmailSendRegister>>,
  TError,
  { data: MemberRegistrationDto },
  TContext
> => {
  const mutationOptions = getPostApiEmailSendRegisterMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiEmailSendAAA = (
  params?: PostApiEmailSendAAAParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(`/api/EmailSend/AAA`, undefined, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getPostApiEmailSendAAAMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiEmailSendAAA>>,
    TError,
    { params?: PostApiEmailSendAAAParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiEmailSendAAA>>,
  TError,
  { params?: PostApiEmailSendAAAParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiEmailSendAAA>>,
    { params?: PostApiEmailSendAAAParams }
  > = (props) => {
    const { params } = props ?? {};

    return postApiEmailSendAAA(params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiEmailSendAAAMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiEmailSendAAA>>
>;

export type PostApiEmailSendAAAMutationError = AxiosError<unknown>;

export const usePostApiEmailSendAAA = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiEmailSendAAA>>,
    TError,
    { params?: PostApiEmailSendAAAParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiEmailSendAAA>>,
  TError,
  { params?: PostApiEmailSendAAAParams },
  TContext
> => {
  const mutationOptions = getPostApiEmailSendAAAMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiEmailSendForgotPassword = (
  forgotPasswordDto: ForgotPasswordDto,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(
    `/api/EmailSend/ForgotPassword`,
    forgotPasswordDto,
    options
  );
};

export const getPostApiEmailSendForgotPasswordMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiEmailSendForgotPassword>>,
    TError,
    { data: ForgotPasswordDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiEmailSendForgotPassword>>,
  TError,
  { data: ForgotPasswordDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiEmailSendForgotPassword>>,
    { data: ForgotPasswordDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiEmailSendForgotPassword(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiEmailSendForgotPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiEmailSendForgotPassword>>
>;
export type PostApiEmailSendForgotPasswordMutationBody = ForgotPasswordDto;
export type PostApiEmailSendForgotPasswordMutationError = AxiosError<unknown>;

export const usePostApiEmailSendForgotPassword = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiEmailSendForgotPassword>>,
    TError,
    { data: ForgotPasswordDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiEmailSendForgotPassword>>,
  TError,
  { data: ForgotPasswordDto },
  TContext
> => {
  const mutationOptions =
    getPostApiEmailSendForgotPasswordMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiEmailSendId = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Member>> => {
  return axios.get(`/api/EmailSend/${id}`, options);
};

export const getGetApiEmailSendIdQueryKey = (id: number) => {
  return [`/api/EmailSend/${id}`] as const;
};

export const getGetApiEmailSendIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiEmailSendId>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiEmailSendId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiEmailSendIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiEmailSendId>>
  > = ({ signal }) => getApiEmailSendId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiEmailSendId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiEmailSendIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiEmailSendId>>
>;
export type GetApiEmailSendIdQueryError = AxiosError<unknown>;

export const useGetApiEmailSendId = <
  TData = Awaited<ReturnType<typeof getApiEmailSendId>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiEmailSendId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiEmailSendIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postApiEmployeeLogin = (
  employeeLoginRequest: EmployeeLoginRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Employee>> => {
  return axios.post(`/api/EmployeeLogin`, employeeLoginRequest, options);
};

export const getPostApiEmployeeLoginMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiEmployeeLogin>>,
    TError,
    { data: EmployeeLoginRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiEmployeeLogin>>,
  TError,
  { data: EmployeeLoginRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiEmployeeLogin>>,
    { data: EmployeeLoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiEmployeeLogin(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiEmployeeLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiEmployeeLogin>>
>;
export type PostApiEmployeeLoginMutationBody = EmployeeLoginRequest;
export type PostApiEmployeeLoginMutationError = AxiosError<unknown>;

export const usePostApiEmployeeLogin = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiEmployeeLogin>>,
    TError,
    { data: EmployeeLoginRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiEmployeeLogin>>,
  TError,
  { data: EmployeeLoginRequest },
  TContext
> => {
  const mutationOptions = getPostApiEmployeeLoginMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postGentoken = (
  params?: PostGentokenParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(`/gentoken`, undefined, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getPostGentokenMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postGentoken>>,
    TError,
    { params?: PostGentokenParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postGentoken>>,
  TError,
  { params?: PostGentokenParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postGentoken>>,
    { params?: PostGentokenParams }
  > = (props) => {
    const { params } = props ?? {};

    return postGentoken(params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostGentokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof postGentoken>>
>;

export type PostGentokenMutationError = AxiosError<unknown>;

export const usePostGentoken = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postGentoken>>,
    TError,
    { params?: PostGentokenParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postGentoken>>,
  TError,
  { params?: PostGentokenParams },
  TContext
> => {
  const mutationOptions = getPostGentokenMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getClaims = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/claims`, options);
};

export const getGetClaimsQueryKey = () => {
  return [`/claims`] as const;
};

export const getGetClaimsQueryOptions = <
  TData = Awaited<ReturnType<typeof getClaims>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getClaims>>, TError, TData>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetClaimsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getClaims>>> = ({
    signal,
  }) => getClaims({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getClaims>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetClaimsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getClaims>>
>;
export type GetClaimsQueryError = AxiosError<unknown>;

export const useGetClaims = <
  TData = Awaited<ReturnType<typeof getClaims>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getClaims>>, TError, TData>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetClaimsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getUsername = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/username`, options);
};

export const getGetUsernameQueryKey = () => {
  return [`/username`] as const;
};

export const getGetUsernameQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsername>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getUsername>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsernameQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsername>>> = ({
    signal,
  }) => getUsername({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsername>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUsernameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsername>>
>;
export type GetUsernameQueryError = AxiosError<unknown>;

export const useGetUsername = <
  TData = Awaited<ReturnType<typeof getUsername>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getUsername>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUsernameQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getJwtid = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/jwtid`, options);
};

export const getGetJwtidQueryKey = () => {
  return [`/jwtid`] as const;
};

export const getGetJwtidQueryOptions = <
  TData = Awaited<ReturnType<typeof getJwtid>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getJwtid>>, TError, TData>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetJwtidQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getJwtid>>> = ({
    signal,
  }) => getJwtid({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getJwtid>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetJwtidQueryResult = NonNullable<
  Awaited<ReturnType<typeof getJwtid>>
>;
export type GetJwtidQueryError = AxiosError<unknown>;

export const useGetJwtid = <
  TData = Awaited<ReturnType<typeof getJwtid>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getJwtid>>, TError, TData>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetJwtidQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postApiLinePayCreate = (
  paymentRequestDto: PaymentRequestDto,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PaymentResponseDto>> => {
  return axios.post(`/api/LinePay/Create`, paymentRequestDto, options);
};

export const getPostApiLinePayCreateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiLinePayCreate>>,
    TError,
    { data: PaymentRequestDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiLinePayCreate>>,
  TError,
  { data: PaymentRequestDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiLinePayCreate>>,
    { data: PaymentRequestDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiLinePayCreate(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiLinePayCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiLinePayCreate>>
>;
export type PostApiLinePayCreateMutationBody = PaymentRequestDto;
export type PostApiLinePayCreateMutationError = AxiosError<unknown>;

export const usePostApiLinePayCreate = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiLinePayCreate>>,
    TError,
    { data: PaymentRequestDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiLinePayCreate>>,
  TError,
  { data: PaymentRequestDto },
  TContext
> => {
  const mutationOptions = getPostApiLinePayCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiLinePayConfirm = (
  paymentConfirmDto: PaymentConfirmDto,
  params?: PostApiLinePayConfirmParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PaymentConfirmResponseDto>> => {
  return axios.post(`/api/LinePay/Confirm`, paymentConfirmDto, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getPostApiLinePayConfirmMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiLinePayConfirm>>,
    TError,
    { data: PaymentConfirmDto; params?: PostApiLinePayConfirmParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiLinePayConfirm>>,
  TError,
  { data: PaymentConfirmDto; params?: PostApiLinePayConfirmParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiLinePayConfirm>>,
    { data: PaymentConfirmDto; params?: PostApiLinePayConfirmParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiLinePayConfirm(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiLinePayConfirmMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiLinePayConfirm>>
>;
export type PostApiLinePayConfirmMutationBody = PaymentConfirmDto;
export type PostApiLinePayConfirmMutationError = AxiosError<unknown>;

export const usePostApiLinePayConfirm = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiLinePayConfirm>>,
    TError,
    { data: PaymentConfirmDto; params?: PostApiLinePayConfirmParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiLinePayConfirm>>,
  TError,
  { data: PaymentConfirmDto; params?: PostApiLinePayConfirmParams },
  TContext
> => {
  const mutationOptions = getPostApiLinePayConfirmMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiLinePayCancel = (
  params?: GetApiLinePayCancelParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/api/LinePay/Cancel`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetApiLinePayCancelQueryKey = (
  params?: GetApiLinePayCancelParams
) => {
  return [`/api/LinePay/Cancel`, ...(params ? [params] : [])] as const;
};

export const getGetApiLinePayCancelQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiLinePayCancel>>,
  TError = AxiosError<unknown>
>(
  params?: GetApiLinePayCancelParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiLinePayCancel>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiLinePayCancelQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiLinePayCancel>>
  > = ({ signal }) => getApiLinePayCancel(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiLinePayCancel>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiLinePayCancelQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiLinePayCancel>>
>;
export type GetApiLinePayCancelQueryError = AxiosError<unknown>;

export const useGetApiLinePayCancel = <
  TData = Awaited<ReturnType<typeof getApiLinePayCancel>>,
  TError = AxiosError<unknown>
>(
  params?: GetApiLinePayCancelParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiLinePayCancel>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiLinePayCancelQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getApiMemberLoginMemberInfo = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/api/MemberLogin/member-info`, options);
};

export const getGetApiMemberLoginMemberInfoQueryKey = () => {
  return [`/api/MemberLogin/member-info`] as const;
};

export const getGetApiMemberLoginMemberInfoQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiMemberLoginMemberInfo>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiMemberLoginMemberInfo>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiMemberLoginMemberInfoQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiMemberLoginMemberInfo>>
  > = ({ signal }) => getApiMemberLoginMemberInfo({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiMemberLoginMemberInfo>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiMemberLoginMemberInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiMemberLoginMemberInfo>>
>;
export type GetApiMemberLoginMemberInfoQueryError = AxiosError<unknown>;

export const useGetApiMemberLoginMemberInfo = <
  TData = Awaited<ReturnType<typeof getApiMemberLoginMemberInfo>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiMemberLoginMemberInfo>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiMemberLoginMemberInfoQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postApiMemberLogin = (
  memberLoginRequest: MemberLoginRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Member>> => {
  return axios.post(`/api/MemberLogin`, memberLoginRequest, options);
};

export const getPostApiMemberLoginMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiMemberLogin>>,
    TError,
    { data: MemberLoginRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiMemberLogin>>,
  TError,
  { data: MemberLoginRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiMemberLogin>>,
    { data: MemberLoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiMemberLogin(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiMemberLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiMemberLogin>>
>;
export type PostApiMemberLoginMutationBody = MemberLoginRequest;
export type PostApiMemberLoginMutationError = AxiosError<unknown>;

export const usePostApiMemberLogin = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiMemberLogin>>,
    TError,
    { data: MemberLoginRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiMemberLogin>>,
  TError,
  { data: MemberLoginRequest },
  TContext
> => {
  const mutationOptions = getPostApiMemberLoginMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiMemberLoginCodeCheck = (
  verifyCodeDto: VerifyCodeDto,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(`/api/MemberLogin/CodeCheck`, verifyCodeDto, options);
};

export const getPostApiMemberLoginCodeCheckMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiMemberLoginCodeCheck>>,
    TError,
    { data: VerifyCodeDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiMemberLoginCodeCheck>>,
  TError,
  { data: VerifyCodeDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiMemberLoginCodeCheck>>,
    { data: VerifyCodeDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiMemberLoginCodeCheck(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiMemberLoginCodeCheckMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiMemberLoginCodeCheck>>
>;
export type PostApiMemberLoginCodeCheckMutationBody = VerifyCodeDto;
export type PostApiMemberLoginCodeCheckMutationError = AxiosError<unknown>;

export const usePostApiMemberLoginCodeCheck = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiMemberLoginCodeCheck>>,
    TError,
    { data: VerifyCodeDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiMemberLoginCodeCheck>>,
  TError,
  { data: VerifyCodeDto },
  TContext
> => {
  const mutationOptions =
    getPostApiMemberLoginCodeCheckMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiMembers = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Member[]>> => {
  return axios.get(`/api/Members`, options);
};

export const getGetApiMembersQueryKey = () => {
  return [`/api/Members`] as const;
};

export const getGetApiMembersQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiMembers>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiMembers>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiMembersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiMembers>>> = ({
    signal,
  }) => getApiMembers({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiMembers>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiMembersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiMembers>>
>;
export type GetApiMembersQueryError = AxiosError<unknown>;

export const useGetApiMembers = <
  TData = Awaited<ReturnType<typeof getApiMembers>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiMembers>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiMembersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postApiMembers = (
  member: Member,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Member>> => {
  return axios.post(`/api/Members`, member, options);
};

export const getPostApiMembersMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiMembers>>,
    TError,
    { data: Member },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiMembers>>,
  TError,
  { data: Member },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiMembers>>,
    { data: Member }
  > = (props) => {
    const { data } = props ?? {};

    return postApiMembers(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiMembersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiMembers>>
>;
export type PostApiMembersMutationBody = Member;
export type PostApiMembersMutationError = AxiosError<unknown>;

export const usePostApiMembers = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiMembers>>,
    TError,
    { data: Member },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiMembers>>,
  TError,
  { data: Member },
  TContext
> => {
  const mutationOptions = getPostApiMembersMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiMembersId = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Member>> => {
  return axios.get(`/api/Members/${id}`, options);
};

export const getGetApiMembersIdQueryKey = (id: number) => {
  return [`/api/Members/${id}`] as const;
};

export const getGetApiMembersIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiMembersId>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiMembersId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiMembersIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiMembersId>>> = ({
    signal,
  }) => getApiMembersId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiMembersId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiMembersIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiMembersId>>
>;
export type GetApiMembersIdQueryError = AxiosError<unknown>;

export const useGetApiMembersId = <
  TData = Awaited<ReturnType<typeof getApiMembersId>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiMembersId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiMembersIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putApiMembersId = (
  id: number,
  member: Member,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.put(`/api/Members/${id}`, member, options);
};

export const getPutApiMembersIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiMembersId>>,
    TError,
    { id: number; data: Member },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiMembersId>>,
  TError,
  { id: number; data: Member },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiMembersId>>,
    { id: number; data: Member }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiMembersId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiMembersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiMembersId>>
>;
export type PutApiMembersIdMutationBody = Member;
export type PutApiMembersIdMutationError = AxiosError<unknown>;

export const usePutApiMembersId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiMembersId>>,
    TError,
    { id: number; data: Member },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiMembersId>>,
  TError,
  { id: number; data: Member },
  TContext
> => {
  const mutationOptions = getPutApiMembersIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiMembersId = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/api/Members/${id}`, options);
};

export const getDeleteApiMembersIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiMembersId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiMembersId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiMembersId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiMembersId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiMembersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiMembersId>>
>;

export type DeleteApiMembersIdMutationError = AxiosError<unknown>;

export const useDeleteApiMembersId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiMembersId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiMembersId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiMembersIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiMembersIdMemberEdit = (
  id: number,
  memberDto: MemberDto,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.put(`/api/Members/${id}/MemberEdit`, memberDto, options);
};

export const getPutApiMembersIdMemberEditMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiMembersIdMemberEdit>>,
    TError,
    { id: number; data: MemberDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiMembersIdMemberEdit>>,
  TError,
  { id: number; data: MemberDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiMembersIdMemberEdit>>,
    { id: number; data: MemberDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiMembersIdMemberEdit(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiMembersIdMemberEditMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiMembersIdMemberEdit>>
>;
export type PutApiMembersIdMemberEditMutationBody = MemberDto;
export type PutApiMembersIdMemberEditMutationError = AxiosError<unknown>;

export const usePutApiMembersIdMemberEdit = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiMembersIdMemberEdit>>,
    TError,
    { id: number; data: MemberDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiMembersIdMemberEdit>>,
  TError,
  { id: number; data: MemberDto },
  TContext
> => {
  const mutationOptions = getPutApiMembersIdMemberEditMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiOrderMemberId = (
  memberId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<OrdersDto[]>> => {
  return axios.get(`/api/Order/${memberId}`, options);
};

export const getGetApiOrderMemberIdQueryKey = (memberId: number) => {
  return [`/api/Order/${memberId}`] as const;
};

export const getGetApiOrderMemberIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOrderMemberId>>,
  TError = AxiosError<unknown>
>(
  memberId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiOrderMemberId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiOrderMemberIdQueryKey(memberId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiOrderMemberId>>
  > = ({ signal }) =>
    getApiOrderMemberId(memberId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!memberId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOrderMemberId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiOrderMemberIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiOrderMemberId>>
>;
export type GetApiOrderMemberIdQueryError = AxiosError<unknown>;

export const useGetApiOrderMemberId = <
  TData = Awaited<ReturnType<typeof getApiOrderMemberId>>,
  TError = AxiosError<unknown>
>(
  memberId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiOrderMemberId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiOrderMemberIdQueryOptions(memberId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postApiOrder = (
  orderCreationDto: OrderCreationDto,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.post(`/api/Order`, orderCreationDto, options);
};

export const getPostApiOrderMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiOrder>>,
    TError,
    { data: OrderCreationDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiOrder>>,
  TError,
  { data: OrderCreationDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiOrder>>,
    { data: OrderCreationDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiOrder(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiOrderMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiOrder>>
>;
export type PostApiOrderMutationBody = OrderCreationDto;
export type PostApiOrderMutationError = AxiosError<unknown>;

export const usePostApiOrder = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiOrder>>,
    TError,
    { data: OrderCreationDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiOrder>>,
  TError,
  { data: OrderCreationDto },
  TContext
> => {
  const mutationOptions = getPostApiOrderMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiOrderId = (
  id: number,
  order: Order,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.put(`/api/Order/${id}`, order, options);
};

export const getPutApiOrderIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiOrderId>>,
    TError,
    { id: number; data: Order },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiOrderId>>,
  TError,
  { id: number; data: Order },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiOrderId>>,
    { id: number; data: Order }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiOrderId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiOrderIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiOrderId>>
>;
export type PutApiOrderIdMutationBody = Order;
export type PutApiOrderIdMutationError = AxiosError<unknown>;

export const usePutApiOrderId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiOrderId>>,
    TError,
    { id: number; data: Order },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiOrderId>>,
  TError,
  { id: number; data: Order },
  TContext
> => {
  const mutationOptions = getPutApiOrderIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiOrdersDetailsId = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<OrderDetailsDto[]>> => {
  return axios.get(`/api/OrdersDetails/${id}`, options);
};

export const getGetApiOrdersDetailsIdQueryKey = (id: number) => {
  return [`/api/OrdersDetails/${id}`] as const;
};

export const getGetApiOrdersDetailsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOrdersDetailsId>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiOrdersDetailsId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiOrdersDetailsIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiOrdersDetailsId>>
  > = ({ signal }) => getApiOrdersDetailsId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOrdersDetailsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiOrdersDetailsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiOrdersDetailsId>>
>;
export type GetApiOrdersDetailsIdQueryError = AxiosError<unknown>;

export const useGetApiOrdersDetailsId = <
  TData = Awaited<ReturnType<typeof getApiOrdersDetailsId>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiOrdersDetailsId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiOrdersDetailsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postApiOrdersDetails = (
  orderDetailsDto: OrderDetailsDto,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.post(`/api/OrdersDetails`, orderDetailsDto, options);
};

export const getPostApiOrdersDetailsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiOrdersDetails>>,
    TError,
    { data: OrderDetailsDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiOrdersDetails>>,
  TError,
  { data: OrderDetailsDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiOrdersDetails>>,
    { data: OrderDetailsDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiOrdersDetails(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiOrdersDetailsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiOrdersDetails>>
>;
export type PostApiOrdersDetailsMutationBody = OrderDetailsDto;
export type PostApiOrdersDetailsMutationError = AxiosError<unknown>;

export const usePostApiOrdersDetails = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiOrdersDetails>>,
    TError,
    { data: OrderDetailsDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiOrdersDetails>>,
  TError,
  { data: OrderDetailsDto },
  TContext
> => {
  const mutationOptions = getPostApiOrdersDetailsMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiOrdersDetailsId = (
  id: number,
  orderDetail: OrderDetail,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.put(`/api/OrdersDetails/${id}`, orderDetail, options);
};

export const getPutApiOrdersDetailsIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiOrdersDetailsId>>,
    TError,
    { id: number; data: OrderDetail },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiOrdersDetailsId>>,
  TError,
  { id: number; data: OrderDetail },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiOrdersDetailsId>>,
    { id: number; data: OrderDetail }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiOrdersDetailsId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiOrdersDetailsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiOrdersDetailsId>>
>;
export type PutApiOrdersDetailsIdMutationBody = OrderDetail;
export type PutApiOrdersDetailsIdMutationError = AxiosError<unknown>;

export const usePutApiOrdersDetailsId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiOrdersDetailsId>>,
    TError,
    { id: number; data: OrderDetail },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiOrdersDetailsId>>,
  TError,
  { id: number; data: OrderDetail },
  TContext
> => {
  const mutationOptions = getPutApiOrdersDetailsIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiProducts = (
  params?: GetApiProductsParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ProductsPagingDto>> => {
  return axios.get(`/api/Products`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetApiProductsQueryKey = (params?: GetApiProductsParams) => {
  return [`/api/Products`, ...(params ? [params] : [])] as const;
};

export const getGetApiProductsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiProducts>>,
  TError = AxiosError<unknown>
>(
  params?: GetApiProductsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProducts>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiProductsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProducts>>> = ({
    signal,
  }) => getApiProducts(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiProducts>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiProductsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiProducts>>
>;
export type GetApiProductsQueryError = AxiosError<unknown>;

export const useGetApiProducts = <
  TData = Awaited<ReturnType<typeof getApiProducts>>,
  TError = AxiosError<unknown>
>(
  params?: GetApiProductsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProducts>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiProductsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postApiProducts = (
  postApiProductsBody: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(`/api/Products`, postApiProductsBody, options);
};

export const getPostApiProductsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiProducts>>,
    TError,
    { data: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiProducts>>,
  TError,
  { data: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiProducts>>,
    { data: string }
  > = (props) => {
    const { data } = props ?? {};

    return postApiProducts(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiProductsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiProducts>>
>;
export type PostApiProductsMutationBody = string;
export type PostApiProductsMutationError = AxiosError<unknown>;

export const usePostApiProducts = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiProducts>>,
    TError,
    { data: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiProducts>>,
  TError,
  { data: string },
  TContext
> => {
  const mutationOptions = getPostApiProductsMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiProductsId = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<BookProductDto>> => {
  return axios.get(`/api/Products/${id}`, options);
};

export const getGetApiProductsIdQueryKey = (id: number) => {
  return [`/api/Products/${id}`] as const;
};

export const getGetApiProductsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiProductsId>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProductsId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiProductsIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiProductsId>>
  > = ({ signal }) => getApiProductsId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiProductsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiProductsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiProductsId>>
>;
export type GetApiProductsIdQueryError = AxiosError<unknown>;

export const useGetApiProductsId = <
  TData = Awaited<ReturnType<typeof getApiProductsId>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProductsId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiProductsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putApiProductsId = (
  id: number,
  putApiProductsIdBody: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.put(`/api/Products/${id}`, putApiProductsIdBody, options);
};

export const getPutApiProductsIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiProductsId>>,
    TError,
    { id: number; data: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiProductsId>>,
  TError,
  { id: number; data: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiProductsId>>,
    { id: number; data: string }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiProductsId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiProductsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiProductsId>>
>;
export type PutApiProductsIdMutationBody = string;
export type PutApiProductsIdMutationError = AxiosError<unknown>;

export const usePutApiProductsId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiProductsId>>,
    TError,
    { id: number; data: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiProductsId>>,
  TError,
  { id: number; data: string },
  TContext
> => {
  const mutationOptions = getPutApiProductsIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiProductsId = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/api/Products/${id}`, options);
};

export const getDeleteApiProductsIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiProductsId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiProductsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiProductsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiProductsId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiProductsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiProductsId>>
>;

export type DeleteApiProductsIdMutationError = AxiosError<unknown>;

export const useDeleteApiProductsId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiProductsId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiProductsId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiProductsIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiProductsGetByDetailsCategoryProductId = (
  productId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<BookProductDto[]>> => {
  return axios.get(`/api/Products/GetByDetailsCategory/${productId}`, options);
};

export const getGetApiProductsGetByDetailsCategoryProductIdQueryKey = (
  productId: number
) => {
  return [`/api/Products/GetByDetailsCategory/${productId}`] as const;
};

export const getGetApiProductsGetByDetailsCategoryProductIdQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getApiProductsGetByDetailsCategoryProductId>
  >,
  TError = AxiosError<unknown>
>(
  productId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProductsGetByDetailsCategoryProductId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiProductsGetByDetailsCategoryProductIdQueryKey(productId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiProductsGetByDetailsCategoryProductId>>
  > = ({ signal }) =>
    getApiProductsGetByDetailsCategoryProductId(productId, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!productId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiProductsGetByDetailsCategoryProductId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiProductsGetByDetailsCategoryProductIdQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getApiProductsGetByDetailsCategoryProductId>>
  >;
export type GetApiProductsGetByDetailsCategoryProductIdQueryError =
  AxiosError<unknown>;

export const useGetApiProductsGetByDetailsCategoryProductId = <
  TData = Awaited<
    ReturnType<typeof getApiProductsGetByDetailsCategoryProductId>
  >,
  TError = AxiosError<unknown>
>(
  productId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProductsGetByDetailsCategoryProductId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetApiProductsGetByDetailsCategoryProductIdQueryOptions(
      productId,
      options
    );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getApiProductsGetByPublishDate = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<BookProductDto[]>> => {
  return axios.get(`/api/Products/GetByPublishDate`, options);
};

export const getGetApiProductsGetByPublishDateQueryKey = () => {
  return [`/api/Products/GetByPublishDate`] as const;
};

export const getGetApiProductsGetByPublishDateQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiProductsGetByPublishDate>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiProductsGetByPublishDate>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiProductsGetByPublishDateQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiProductsGetByPublishDate>>
  > = ({ signal }) =>
    getApiProductsGetByPublishDate({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiProductsGetByPublishDate>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiProductsGetByPublishDateQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiProductsGetByPublishDate>>
>;
export type GetApiProductsGetByPublishDateQueryError = AxiosError<unknown>;

export const useGetApiProductsGetByPublishDate = <
  TData = Awaited<ReturnType<typeof getApiProductsGetByPublishDate>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiProductsGetByPublishDate>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiProductsGetByPublishDateQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getApiProductsGetByMostProductOrder = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<BookProductDto[]>> => {
  return axios.get(`/api/Products/GetByMostProductOrder`, options);
};

export const getGetApiProductsGetByMostProductOrderQueryKey = () => {
  return [`/api/Products/GetByMostProductOrder`] as const;
};

export const getGetApiProductsGetByMostProductOrderQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiProductsGetByMostProductOrder>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiProductsGetByMostProductOrder>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiProductsGetByMostProductOrderQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiProductsGetByMostProductOrder>>
  > = ({ signal }) =>
    getApiProductsGetByMostProductOrder({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiProductsGetByMostProductOrder>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiProductsGetByMostProductOrderQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiProductsGetByMostProductOrder>>
>;
export type GetApiProductsGetByMostProductOrderQueryError = AxiosError<unknown>;

export const useGetApiProductsGetByMostProductOrder = <
  TData = Awaited<ReturnType<typeof getApiProductsGetByMostProductOrder>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiProductsGetByMostProductOrder>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetApiProductsGetByMostProductOrderQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getApiProductsCategory = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string[]>> => {
  return axios.get(`/api/ProductsCategory`, options);
};

export const getGetApiProductsCategoryQueryKey = () => {
  return [`/api/ProductsCategory`] as const;
};

export const getGetApiProductsCategoryQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiProductsCategory>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiProductsCategory>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiProductsCategoryQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiProductsCategory>>
  > = ({ signal }) => getApiProductsCategory({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiProductsCategory>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiProductsCategoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiProductsCategory>>
>;
export type GetApiProductsCategoryQueryError = AxiosError<unknown>;

export const useGetApiProductsCategory = <
  TData = Awaited<ReturnType<typeof getApiProductsCategory>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiProductsCategory>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiProductsCategoryQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postApiProductsCategory = (
  postApiProductsCategoryBody: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(
    `/api/ProductsCategory`,
    postApiProductsCategoryBody,
    options
  );
};

export const getPostApiProductsCategoryMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiProductsCategory>>,
    TError,
    { data: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiProductsCategory>>,
  TError,
  { data: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiProductsCategory>>,
    { data: string }
  > = (props) => {
    const { data } = props ?? {};

    return postApiProductsCategory(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiProductsCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiProductsCategory>>
>;
export type PostApiProductsCategoryMutationBody = string;
export type PostApiProductsCategoryMutationError = AxiosError<unknown>;

export const usePostApiProductsCategory = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiProductsCategory>>,
    TError,
    { data: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiProductsCategory>>,
  TError,
  { data: string },
  TContext
> => {
  const mutationOptions = getPostApiProductsCategoryMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiProductsCategoryId = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.get(`/api/ProductsCategory/${id}`, options);
};

export const getGetApiProductsCategoryIdQueryKey = (id: number) => {
  return [`/api/ProductsCategory/${id}`] as const;
};

export const getGetApiProductsCategoryIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiProductsCategoryId>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProductsCategoryId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiProductsCategoryIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiProductsCategoryId>>
  > = ({ signal }) => getApiProductsCategoryId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiProductsCategoryId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiProductsCategoryIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiProductsCategoryId>>
>;
export type GetApiProductsCategoryIdQueryError = AxiosError<unknown>;

export const useGetApiProductsCategoryId = <
  TData = Awaited<ReturnType<typeof getApiProductsCategoryId>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiProductsCategoryId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiProductsCategoryIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putApiProductsCategoryId = (
  id: number,
  putApiProductsCategoryIdBody: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.put(
    `/api/ProductsCategory/${id}`,
    putApiProductsCategoryIdBody,
    options
  );
};

export const getPutApiProductsCategoryIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiProductsCategoryId>>,
    TError,
    { id: number; data: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiProductsCategoryId>>,
  TError,
  { id: number; data: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiProductsCategoryId>>,
    { id: number; data: string }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiProductsCategoryId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiProductsCategoryIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiProductsCategoryId>>
>;
export type PutApiProductsCategoryIdMutationBody = string;
export type PutApiProductsCategoryIdMutationError = AxiosError<unknown>;

export const usePutApiProductsCategoryId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiProductsCategoryId>>,
    TError,
    { id: number; data: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiProductsCategoryId>>,
  TError,
  { id: number; data: string },
  TContext
> => {
  const mutationOptions = getPutApiProductsCategoryIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiProductsCategoryId = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/api/ProductsCategory/${id}`, options);
};

export const getDeleteApiProductsCategoryIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiProductsCategoryId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiProductsCategoryId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiProductsCategoryId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiProductsCategoryId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiProductsCategoryIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiProductsCategoryId>>
>;

export type DeleteApiProductsCategoryIdMutationError = AxiosError<unknown>;

export const useDeleteApiProductsCategoryId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiProductsCategoryId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiProductsCategoryId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiProductsCategoryIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiUsedBookBuyerInfomationsApi = (
  params?: GetApiUsedBookBuyerInfomationsApiParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UsedBookBuyerInformation>> => {
  return axios.get(`/api/UsedBookBuyerInfomationsApi`, {
    ...options,
    params: { ...params, ...options?.params }
  });
};

export const getGetApiUsedBookBuyerInfomationsApiQueryKey = (
  params?: GetApiUsedBookBuyerInfomationsApiParams
) => {
  return [
    `/api/UsedBookBuyerInfomationsApi`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetApiUsedBookBuyerInfomationsApiQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsedBookBuyerInfomationsApi>>,
  TError = AxiosError<unknown>
>(
  params?: GetApiUsedBookBuyerInfomationsApiParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsedBookBuyerInfomationsApi>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiUsedBookBuyerInfomationsApiQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsedBookBuyerInfomationsApi>>
  > = ({ signal }) =>
    getApiUsedBookBuyerInfomationsApi(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsedBookBuyerInfomationsApi>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiUsedBookBuyerInfomationsApiQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsedBookBuyerInfomationsApi>>
>;
export type GetApiUsedBookBuyerInfomationsApiQueryError = AxiosError<unknown>;

export const useGetApiUsedBookBuyerInfomationsApi = <
  TData = Awaited<ReturnType<typeof getApiUsedBookBuyerInfomationsApi>>,
  TError = AxiosError<unknown>
>(
  params?: GetApiUsedBookBuyerInfomationsApiParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsedBookBuyerInfomationsApi>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiUsedBookBuyerInfomationsApiQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postApiUsedBookBuyerInfomationsApi = (
  usedBookBuyerInformation: UsedBookBuyerInformation,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.post(
    `/api/UsedBookBuyerInfomationsApi`,
    usedBookBuyerInformation,
    options
  );
};

export const getPostApiUsedBookBuyerInfomationsApiMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsedBookBuyerInfomationsApi>>,
    TError,
    { data: UsedBookBuyerInformation },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiUsedBookBuyerInfomationsApi>>,
  TError,
  { data: UsedBookBuyerInformation },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiUsedBookBuyerInfomationsApi>>,
    { data: UsedBookBuyerInformation }
  > = (props) => {
    const { data } = props ?? {};

    return postApiUsedBookBuyerInfomationsApi(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiUsedBookBuyerInfomationsApiMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiUsedBookBuyerInfomationsApi>>
>;
export type PostApiUsedBookBuyerInfomationsApiMutationBody =
  UsedBookBuyerInformation;
export type PostApiUsedBookBuyerInfomationsApiMutationError =
  AxiosError<unknown>;

export const usePostApiUsedBookBuyerInfomationsApi = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsedBookBuyerInfomationsApi>>,
    TError,
    { data: UsedBookBuyerInformation },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions =
    getPostApiUsedBookBuyerInfomationsApiMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiUsedBookBuyerInfomationsApiOrderRecipient = (
  params?: PostApiUsedBookBuyerInfomationsApiOrderRecipientParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.post(
    `/api/UsedBookBuyerInfomationsApi/orderRecipient`,
    undefined,
    {
      ...options,
      params: { ...params, ...options?.params }
    }
  );
};

export const getPostApiUsedBookBuyerInfomationsApiOrderRecipientMutationOptions =
  <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof postApiUsedBookBuyerInfomationsApiOrderRecipient>
      >,
      TError,
      { params?: PostApiUsedBookBuyerInfomationsApiOrderRecipientParams },
      TContext
    >;
    axios?: AxiosRequestConfig;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof postApiUsedBookBuyerInfomationsApiOrderRecipient>
    >,
    TError,
    { params?: PostApiUsedBookBuyerInfomationsApiOrderRecipientParams },
    TContext
  > => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof postApiUsedBookBuyerInfomationsApiOrderRecipient>
      >,
      { params?: PostApiUsedBookBuyerInfomationsApiOrderRecipientParams }
    > = (props) => {
      const { params } = props ?? {};

      return postApiUsedBookBuyerInfomationsApiOrderRecipient(
        params,
        axiosOptions
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type PostApiUsedBookBuyerInfomationsApiOrderRecipientMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof postApiUsedBookBuyerInfomationsApiOrderRecipient>>
  >;

export type PostApiUsedBookBuyerInfomationsApiOrderRecipientMutationError =
  AxiosError<unknown>;

export const usePostApiUsedBookBuyerInfomationsApiOrderRecipient = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<typeof postApiUsedBookBuyerInfomationsApiOrderRecipient>
    >,
    TError,
    { params?: PostApiUsedBookBuyerInfomationsApiOrderRecipientParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions =
    getPostApiUsedBookBuyerInfomationsApiOrderRecipientMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiUsedBookCartsApi = (
  params?: GetApiUsedBookCartsApiParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UsedBookCartsDto[]>> => {
  return axios.get(`/api/UsedBookCartsApi`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetApiUsedBookCartsApiQueryKey = (
  params?: GetApiUsedBookCartsApiParams
) => {
  return [`/api/UsedBookCartsApi`, ...(params ? [params] : [])] as const;
};

export const getGetApiUsedBookCartsApiQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsedBookCartsApi>>,
  TError = AxiosError<unknown>
>(
  params?: GetApiUsedBookCartsApiParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsedBookCartsApi>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiUsedBookCartsApiQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsedBookCartsApi>>
  > = ({ signal }) =>
    getApiUsedBookCartsApi(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsedBookCartsApi>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiUsedBookCartsApiQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsedBookCartsApi>>
>;
export type GetApiUsedBookCartsApiQueryError = AxiosError<unknown>;

export const useGetApiUsedBookCartsApi = <
  TData = Awaited<ReturnType<typeof getApiUsedBookCartsApi>>,
  TError = AxiosError<unknown>
>(
  params?: GetApiUsedBookCartsApiParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsedBookCartsApi>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiUsedBookCartsApiQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postApiUsedBookCartsApi = (
  addUsedBookToCartDto: AddUsedBookToCartDto,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.post(`/api/UsedBookCartsApi`, addUsedBookToCartDto, options);
};

export const getPostApiUsedBookCartsApiMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsedBookCartsApi>>,
    TError,
    { data: AddUsedBookToCartDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiUsedBookCartsApi>>,
  TError,
  { data: AddUsedBookToCartDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiUsedBookCartsApi>>,
    { data: AddUsedBookToCartDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiUsedBookCartsApi(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiUsedBookCartsApiMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiUsedBookCartsApi>>
>;
export type PostApiUsedBookCartsApiMutationBody = AddUsedBookToCartDto;
export type PostApiUsedBookCartsApiMutationError = AxiosError<unknown>;

export const usePostApiUsedBookCartsApi = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsedBookCartsApi>>,
    TError,
    { data: AddUsedBookToCartDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiUsedBookCartsApi>>,
  TError,
  { data: UsedBooksCart },
  TContext
> => {
  const mutationOptions = getPostApiUsedBookCartsApiMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiUsedBookCartsApiId = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/api/UsedBookCartsApi/${id}`, options);
};

export const getDeleteApiUsedBookCartsApiIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiUsedBookCartsApiId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiUsedBookCartsApiId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiUsedBookCartsApiId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiUsedBookCartsApiId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiUsedBookCartsApiIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiUsedBookCartsApiId>>
>;

export type DeleteApiUsedBookCartsApiIdMutationError = AxiosError<unknown>;

export const useDeleteApiUsedBookCartsApiId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiUsedBookCartsApiId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiUsedBookCartsApiId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiUsedBookCartsApiIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiUsedBookOrderDetails = (
  params?: GetApiUsedBookOrderDetailsParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UsedBookOrderDetailDto[]>> => {
  return axios.get(`/api/UsedBookOrderDetails`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetApiUsedBookOrderDetailsQueryKey = (
  params?: GetApiUsedBookOrderDetailsParams
) => {
  return [`/api/UsedBookOrderDetails`, ...(params ? [params] : [])] as const;
};

export const getGetApiUsedBookOrderDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsedBookOrderDetails>>,
  TError = AxiosError<unknown>
>(
  params?: GetApiUsedBookOrderDetailsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsedBookOrderDetails>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiUsedBookOrderDetailsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsedBookOrderDetails>>
  > = ({ signal }) =>
    getApiUsedBookOrderDetails(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsedBookOrderDetails>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiUsedBookOrderDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsedBookOrderDetails>>
>;
export type GetApiUsedBookOrderDetailsQueryError = AxiosError<unknown>;

export const useGetApiUsedBookOrderDetails = <
  TData = Awaited<ReturnType<typeof getApiUsedBookOrderDetails>>,
  TError = AxiosError<unknown>
>(
  params?: GetApiUsedBookOrderDetailsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsedBookOrderDetails>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiUsedBookOrderDetailsQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postApiUsedBookOrderDetails = (
  usedBookOrderDetailDto: UsedBookOrderDetailDto,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.post(
    `/api/UsedBookOrderDetails`,
    usedBookOrderDetailDto,
    options
  );
};

export const getPostApiUsedBookOrderDetailsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsedBookOrderDetails>>,
    TError,
    { data: UsedBookOrderDetailDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiUsedBookOrderDetails>>,
  TError,
  { data: UsedBookOrderDetailDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiUsedBookOrderDetails>>,
    { data: UsedBookOrderDetailDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiUsedBookOrderDetails(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiUsedBookOrderDetailsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiUsedBookOrderDetails>>
>;
export type PostApiUsedBookOrderDetailsMutationBody = UsedBookOrderDetailDto;
export type PostApiUsedBookOrderDetailsMutationError = AxiosError<unknown>;

export const usePostApiUsedBookOrderDetails = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsedBookOrderDetails>>,
    TError,
    { data: UsedBookOrderDetailDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiUsedBookOrderDetails>>,
  TError,
  { data: UsedBookOrderDetailDto },
  TContext
> => {
  const mutationOptions =
    getPostApiUsedBookOrderDetailsMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiUsedBookOrdersApiBookIdBookId = (
  bookId: number,
  options?: AxiosRequestConfig

): Promise<AxiosResponse<number>> => {
  return axios.post(`/api/UsedBookOrdersApi`, usedBooksOrder, options);

};

export const getGetApiUsedBookOrdersApiBookIdBookIdQueryKey = (
  bookId: number
) => {
  return [`/api/UsedBookOrdersApi/bookId/${bookId}`] as const;
};

export const getGetApiUsedBookOrdersApiBookIdBookIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsedBookOrdersApiBookIdBookId>>,
  TError = AxiosError<unknown>
>(
  bookId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsedBookOrdersApiBookIdBookId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiUsedBookOrdersApiBookIdBookIdQueryKey(bookId);


  return { mutationFn, ...mutationOptions };
};

export type PostApiUsedBookOrdersApiMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiUsedBookOrdersApi>>
>;
export type PostApiUsedBookOrdersApiMutationBody = UsedBooksOrder;
export type PostApiUsedBookOrdersApiMutationError = AxiosError<unknown>;

export const usePostApiUsedBookOrdersApi = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsedBookOrdersApi>>,
    TError,
    { data: UsedBooksOrder },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPostApiUsedBookOrdersApiMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiUsedBookOrdersApi = (
  params?: GetApiUsedBookOrdersApiParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UsedBookOrderDto[]>> => {
  return axios.get(`/api/UsedBookOrdersApi`, {
    ...options,
    params: { ...params, ...options?.params }
  });
};

export const getGetApiUsedBookOrdersApiQueryKey = (
  params?: GetApiUsedBookOrdersApiParams
) => {
  return [`/api/UsedBookOrdersApi`, ...(params ? [params] : [])] as const;
};

export const getGetApiUsedBookOrdersApiQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsedBookOrdersApi>>,
  TError = AxiosError<unknown>
>(
  params?: GetApiUsedBookOrdersApiParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsedBookOrdersApi>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiUsedBookOrdersApiQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsedBookOrdersApi>>
  > = ({ signal }) =>
    getApiUsedBookOrdersApi(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsedBookOrdersApi>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiUsedBookOrdersApiQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsedBookOrdersApi>>
>;
export type GetApiUsedBookOrdersApiQueryError = AxiosError<unknown>;

export const useGetApiUsedBookOrdersApi = <
  TData = Awaited<ReturnType<typeof getApiUsedBookOrdersApi>>,
  TError = AxiosError<unknown>
>(
  params?: GetApiUsedBookOrdersApiParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsedBookOrdersApi>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiUsedBookOrdersApiQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putApiUsedBookOrdersApi = (
  params?: PutApiUsedBookOrdersApiParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.put(`/api/UsedBookOrdersApi`, undefined, {
    ...options,
    params: { ...params, ...options?.params }
  });
};

export const getPutApiUsedBookOrdersApiMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiUsedBookOrdersApi>>,
    TError,
    { params?: PutApiUsedBookOrdersApiParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiUsedBookOrdersApi>>,
  TError,
  { params?: PutApiUsedBookOrdersApiParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiUsedBookOrdersApi>>,
    { params?: PutApiUsedBookOrdersApiParams }
  > = (props) => {
    const { params } = props ?? {};

    return putApiUsedBookOrdersApi(params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiUsedBookOrdersApiMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiUsedBookOrdersApi>>
>;

export type PutApiUsedBookOrdersApiMutationError = AxiosError<unknown>;

export const usePutApiUsedBookOrdersApi = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiUsedBookOrdersApi>>,
    TError,
    { params?: PutApiUsedBookOrdersApiParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPutApiUsedBookOrdersApiMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiUsedBookOrdersApiBookIdBookId = (
  bookId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.get(`/api/UsedBookOrdersApi/bookId/${bookId}`, options);
};

export const getGetApiUsedBookOrdersApiBookIdBookIdQueryKey = (
  bookId: number
) => {
  return [`/api/UsedBookOrdersApi/bookId/${bookId}`] as const;
};

export const getGetApiUsedBookOrdersApiBookIdBookIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsedBookOrdersApiBookIdBookId>>,
  TError = AxiosError<unknown>
>(
  bookId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsedBookOrdersApiBookIdBookId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiUsedBookOrdersApiBookIdBookIdQueryKey(bookId);


  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsedBookOrdersApiBookIdBookId>>
  > = ({ signal }) =>
    getApiUsedBookOrdersApiBookIdBookId(bookId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!bookId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsedBookOrdersApiBookIdBookId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiUsedBookOrdersApiBookIdBookIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsedBookOrdersApiBookIdBookId>>
>;
export type GetApiUsedBookOrdersApiBookIdBookIdQueryError = AxiosError<unknown>;

export const useGetApiUsedBookOrdersApiBookIdBookId = <
  TData = Awaited<ReturnType<typeof getApiUsedBookOrdersApiBookIdBookId>>,
  TError = AxiosError<unknown>
>(
  bookId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsedBookOrdersApiBookIdBookId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiUsedBookOrdersApiBookIdBookIdQueryOptions(
    bookId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};


export const postApiUsedBookOrdersCreateApi = (
  usedBookCartsDto: UsedBookCartsDto[],
  params?: PostApiUsedBookOrdersCreateApiParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.post(`/api/UsedBookOrdersCreateApi`, usedBookCartsDto, {
    ...options,
    params: { ...params, ...options?.params }
  });
};

export const getPostApiUsedBookOrdersCreateApiMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsedBookOrdersCreateApi>>,
    TError,
    { data: UsedBookCartsDto[]; params?: PostApiUsedBookOrdersCreateApiParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiUsedBookOrdersCreateApi>>,
  TError,
  { data: UsedBookCartsDto[]; params?: PostApiUsedBookOrdersCreateApiParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiUsedBookOrdersCreateApi>>,
    { data: UsedBookCartsDto[]; params?: PostApiUsedBookOrdersCreateApiParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiUsedBookOrdersCreateApi(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiUsedBookOrdersCreateApiMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiUsedBookOrdersCreateApi>>
>;
export type PostApiUsedBookOrdersCreateApiMutationBody = UsedBookCartsDto[];
export type PostApiUsedBookOrdersCreateApiMutationError = AxiosError<unknown>;

export const usePostApiUsedBookOrdersCreateApi = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsedBookOrdersCreateApi>>,
    TError,
    { data: UsedBookCartsDto[]; params?: PostApiUsedBookOrdersCreateApiParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions =
    getPostApiUsedBookOrdersCreateApiMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiUsedBookPaymentRecordsApi = (
  params?: GetApiUsedBookPaymentRecordsApiParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UsedBookPaymentRecord[]>> => {
  return axios.get(`/api/UsedBookPaymentRecordsApi`, {
    ...options,
    params: { ...params, ...options?.params }
  });
};

export const getGetApiUsedBookPaymentRecordsApiQueryKey = (
  params?: GetApiUsedBookPaymentRecordsApiParams
) => {
  return [
    `/api/UsedBookPaymentRecordsApi`,
    ...(params ? [params] : [])
  ] as const;
};

export const getGetApiUsedBookPaymentRecordsApiQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsedBookPaymentRecordsApi>>,
  TError = AxiosError<unknown>
>(
  params?: GetApiUsedBookPaymentRecordsApiParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsedBookPaymentRecordsApi>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiUsedBookPaymentRecordsApiQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsedBookPaymentRecordsApi>>
  > = ({ signal }) =>
    getApiUsedBookPaymentRecordsApi(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsedBookPaymentRecordsApi>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiUsedBookPaymentRecordsApiQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsedBookPaymentRecordsApi>>
>;
export type GetApiUsedBookPaymentRecordsApiQueryError = AxiosError<unknown>;

export const useGetApiUsedBookPaymentRecordsApi = <
  TData = Awaited<ReturnType<typeof getApiUsedBookPaymentRecordsApi>>,
  TError = AxiosError<unknown>
>(
  params?: GetApiUsedBookPaymentRecordsApiParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsedBookPaymentRecordsApi>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiUsedBookPaymentRecordsApiQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postApiUsedBookPaymentRecordsApi = (
  usedBookPaymentRecord: UsedBookPaymentRecord,

  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.post(`/api/UsedBookOrdersApi`, usedBooksOrder, options);
};

export const getPostApiUsedBookOrdersApiMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsedBookOrdersApi>>,
    TError,
    { data: UsedBooksOrder },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiUsedBookOrdersApi>>,
  TError,
  { data: UsedBooksOrder },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiUsedBookOrdersApi>>,
    { data: UsedBooksOrder }
  > = (props) => {
    const { data } = props ?? {};

    return postApiUsedBookOrdersApi(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiUsedBookOrdersApiMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiUsedBookOrdersApi>>
>;
export type PostApiUsedBookOrdersApiMutationBody = UsedBooksOrder;
export type PostApiUsedBookOrdersApiMutationError = AxiosError<unknown>;

export const usePostApiUsedBookOrdersApi = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsedBookOrdersApi>>,
    TError,
    { data: UsedBooksOrder },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiUsedBookOrdersApi>>,
  TError,
  { data: UsedBooksOrder },
  TContext
> => {
  const mutationOptions = getPostApiUsedBookOrdersApiMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiUsedBookOrdersApi = (
  params?: GetApiUsedBookOrdersApiParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UsedBookOrderDto[]>> => {
  return axios.get(`/api/UsedBookOrdersApi`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetApiUsedBookOrdersApiQueryKey = (
  params?: GetApiUsedBookOrdersApiParams
) => {
  return [`/api/UsedBookOrdersApi`, ...(params ? [params] : [])] as const;
};

export const getGetApiUsedBookOrdersApiQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsedBookOrdersApi>>,
  TError = AxiosError<unknown>
>(
  params?: GetApiUsedBookOrdersApiParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsedBookOrdersApi>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiUsedBookOrdersApiQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsedBookOrdersApi>>
  > = ({ signal }) =>
    getApiUsedBookOrdersApi(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsedBookOrdersApi>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiUsedBookOrdersApiQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsedBookOrdersApi>>
>;
export type GetApiUsedBookOrdersApiQueryError = AxiosError<unknown>;

export const useGetApiUsedBookOrdersApi = <
  TData = Awaited<ReturnType<typeof getApiUsedBookOrdersApi>>,
  TError = AxiosError<unknown>
>(
  params?: GetApiUsedBookOrdersApiParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsedBookOrdersApi>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiUsedBookOrdersApiQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getApiUsedBooksIsbnIsbn = (
  isbn: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UsedBookDto>> => {
  return axios.get(`/api/UsedBooks/isbn/${isbn}`, options);
};

export const getGetApiUsedBooksIsbnIsbnQueryKey = (isbn: string) => {
  return [`/api/UsedBooks/isbn/${isbn}`] as const;
};

export const getGetApiUsedBooksIsbnIsbnQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsedBooksIsbnIsbn>>,
  TError = AxiosError<unknown>
>(
  isbn: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsedBooksIsbnIsbn>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiUsedBooksIsbnIsbnQueryKey(isbn);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsedBooksIsbnIsbn>>
  > = ({ signal }) =>
    getApiUsedBooksIsbnIsbn(isbn, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!isbn,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsedBooksIsbnIsbn>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiUsedBooksIsbnIsbnQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsedBooksIsbnIsbn>>
>;
export type GetApiUsedBooksIsbnIsbnQueryError = AxiosError<unknown>;

export const useGetApiUsedBooksIsbnIsbn = <
  TData = Awaited<ReturnType<typeof getApiUsedBooksIsbnIsbn>>,
  TError = AxiosError<unknown>
>(
  isbn: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsedBooksIsbnIsbn>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiUsedBooksIsbnIsbnQueryOptions(isbn, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getApiUsedBooksIdId = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UsedBookDto>> => {
  return axios.get(`/api/UsedBooks/Id/${id}`, options);
};

export const getGetApiUsedBooksIdIdQueryKey = (id: number) => {
  return [`/api/UsedBooks/Id/${id}`] as const;
};

export const getGetApiUsedBooksIdIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsedBooksIdId>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsedBooksIdId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiUsedBooksIdIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsedBooksIdId>>
  > = ({ signal }) => getApiUsedBooksIdId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsedBooksIdId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiUsedBooksIdIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsedBooksIdId>>
>;
export type GetApiUsedBooksIdIdQueryError = AxiosError<unknown>;

export const useGetApiUsedBooksIdId = <
  TData = Awaited<ReturnType<typeof getApiUsedBooksIdId>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsedBooksIdId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiUsedBooksIdIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getApiUsedBooksCategoryBookId = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UsedBookDto[]>> => {
  return axios.get(`/api/UsedBooks/Category/Book/${id}`, options);
};

export const getGetApiUsedBooksCategoryBookIdQueryKey = (id: number) => {
  return [`/api/UsedBooks/Category/Book/${id}`] as const;
};

export const getGetApiUsedBooksCategoryBookIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsedBooksCategoryBookId>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsedBooksCategoryBookId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiUsedBooksCategoryBookIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsedBooksCategoryBookId>>
  > = ({ signal }) =>
    getApiUsedBooksCategoryBookId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsedBooksCategoryBookId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiUsedBooksCategoryBookIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsedBooksCategoryBookId>>
>;
export type GetApiUsedBooksCategoryBookIdQueryError = AxiosError<unknown>;

export const useGetApiUsedBooksCategoryBookId = <
  TData = Awaited<ReturnType<typeof getApiUsedBooksCategoryBookId>>,
  TError = AxiosError<unknown>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsedBooksCategoryBookId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiUsedBooksCategoryBookIdQueryOptions(
    id,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getApiUsedBooks = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UsedBookDto[]>> => {
  return axios.get(`/api/UsedBooks`, options);
};

export const getGetApiUsedBooksQueryKey = () => {
  return [`/api/UsedBooks`] as const;
};

export const getGetApiUsedBooksQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsedBooks>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsedBooks>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiUsedBooksQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsedBooks>>> = ({
    signal,
  }) => getApiUsedBooks({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsedBooks>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiUsedBooksQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsedBooks>>
>;
export type GetApiUsedBooksQueryError = AxiosError<unknown>;

export const useGetApiUsedBooks = <
  TData = Awaited<ReturnType<typeof getApiUsedBooks>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsedBooks>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiUsedBooksQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postApiUsedBooks = (
  postApiUsedBooksBody: PostApiUsedBooksBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  const formData = new FormData();
  if (postApiUsedBooksBody.Id !== undefined) {
    formData.append("Id", postApiUsedBooksBody.Id.toString());
  }
  if (postApiUsedBooksBody.MemberId !== undefined) {
    formData.append("MemberId", postApiUsedBooksBody.MemberId.toString());
  }
  if (postApiUsedBooksBody.BookName !== undefined) {
    formData.append("BookName", postApiUsedBooksBody.BookName);
  }
  if (postApiUsedBooksBody.CategoryId !== undefined) {
    formData.append("CategoryId", postApiUsedBooksBody.CategoryId.toString());
  }
  if (postApiUsedBooksBody.Authors !== undefined) {
    postApiUsedBooksBody.Authors.forEach((value) =>
      formData.append("Authors", value)
    );
  }
  if (postApiUsedBooksBody.PublisherName !== undefined) {
    formData.append("PublisherName", postApiUsedBooksBody.PublisherName);
  }
  if (postApiUsedBooksBody.PublishDate !== undefined) {
    formData.append("PublishDate", postApiUsedBooksBody.PublishDate);
  }
  if (postApiUsedBooksBody.ProductStatus !== undefined) {
    formData.append(
      "ProductStatus",
      postApiUsedBooksBody.ProductStatus.toString()
    );
  }
  if (postApiUsedBooksBody.Price !== undefined) {
    formData.append("Price", postApiUsedBooksBody.Price.toString());
  }
  if (postApiUsedBooksBody.Description !== undefined) {
    formData.append("Description", postApiUsedBooksBody.Description);
  }
  if (postApiUsedBooksBody.ISBN !== undefined) {
    formData.append("ISBN", postApiUsedBooksBody.ISBN);
  }
  if (postApiUsedBooksBody["ImageLinks.SmallThumbnailPicture"] !== undefined) {
    formData.append(
      "ImageLinks.SmallThumbnailPicture",
      postApiUsedBooksBody["ImageLinks.SmallThumbnailPicture"]
    );
  }
  if (postApiUsedBooksBody["ImageLinks.ThumbnailPicture"] !== undefined) {
    formData.append(
      "ImageLinks.ThumbnailPicture",
      postApiUsedBooksBody["ImageLinks.ThumbnailPicture"]
    );
  }
  if (postApiUsedBooksBody["ImageLinks.SmallPicture"] !== undefined) {
    formData.append(
      "ImageLinks.SmallPicture",
      postApiUsedBooksBody["ImageLinks.SmallPicture"]
    );
  }
  if (postApiUsedBooksBody.WebReaderLink !== undefined) {
    formData.append("WebReaderLink", postApiUsedBooksBody.WebReaderLink);
  }
  if (postApiUsedBooksBody.Picture !== undefined) {
    formData.append("Picture", postApiUsedBooksBody.Picture);
  }
  if (postApiUsedBooksBody.ImageFile !== undefined) {
    formData.append("ImageFile", postApiUsedBooksBody.ImageFile);
  }
  if (postApiUsedBooksBody.BookStatus !== undefined) {
    formData.append("BookStatus", postApiUsedBooksBody.BookStatus);
  }
  if (postApiUsedBooksBody.MemberEmail !== undefined) {
    formData.append("MemberEmail", postApiUsedBooksBody.MemberEmail);
  }
  if (postApiUsedBooksBody.CategoryName !== undefined) {
    formData.append("CategoryName", postApiUsedBooksBody.CategoryName);
  }
  if (postApiUsedBooksBody.ReleaseDate !== undefined) {
    formData.append("ReleaseDate", postApiUsedBooksBody.ReleaseDate);
  }
  if (postApiUsedBooksBody.IsDeleted !== undefined) {
    formData.append("IsDeleted", postApiUsedBooksBody.IsDeleted.toString());
  }

  return axios.post(`/api/UsedBooks`, formData, options);
};

export const getPostApiUsedBooksMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsedBooks>>,
    TError,
    { data: PostApiUsedBooksBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiUsedBooks>>,
  TError,
  { data: PostApiUsedBooksBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiUsedBooks>>,
    { data: PostApiUsedBooksBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiUsedBooks(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiUsedBooksMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiUsedBooks>>
>;
export type PostApiUsedBooksMutationBody = PostApiUsedBooksBody;
export type PostApiUsedBooksMutationError = AxiosError<unknown>;

export const usePostApiUsedBooks = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsedBooks>>,
    TError,
    { data: PostApiUsedBooksBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiUsedBooks>>,
  TError,
  { data: PostApiUsedBooksBody },
  TContext
> => {
  const mutationOptions = getPostApiUsedBooksMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiUsedBooksUserIdUserId = (
  userId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UsedBookDto[]>> => {
  return axios.get(`/api/UsedBooks/userId/${userId}`, options);
};

export const getGetApiUsedBooksUserIdUserIdQueryKey = (userId: number) => {
  return [`/api/UsedBooks/userId/${userId}`] as const;
};

export const getGetApiUsedBooksUserIdUserIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsedBooksUserIdUserId>>,
  TError = AxiosError<unknown>
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsedBooksUserIdUserId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiUsedBooksUserIdUserIdQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsedBooksUserIdUserId>>
  > = ({ signal }) =>
    getApiUsedBooksUserIdUserId(userId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsedBooksUserIdUserId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiUsedBooksUserIdUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsedBooksUserIdUserId>>
>;
export type GetApiUsedBooksUserIdUserIdQueryError = AxiosError<unknown>;

export const useGetApiUsedBooksUserIdUserId = <
  TData = Awaited<ReturnType<typeof getApiUsedBooksUserIdUserId>>,
  TError = AxiosError<unknown>
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiUsedBooksUserIdUserId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiUsedBooksUserIdUserIdQueryOptions(
    userId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putApiUsedBooksBookId = (
  bookId: number,
  boolean: boolean,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.put(`/api/UsedBooks/${bookId}`, boolean, options);
};

export const getPutApiUsedBooksBookIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiUsedBooksBookId>>,
    TError,
    { bookId: number; data: boolean },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiUsedBooksBookId>>,
  TError,
  { bookId: number; data: boolean },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiUsedBooksBookId>>,
    { bookId: number; data: boolean }
  > = (props) => {
    const { bookId, data } = props ?? {};

    return putApiUsedBooksBookId(bookId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiUsedBooksBookIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiUsedBooksBookId>>
>;
export type PutApiUsedBooksBookIdMutationBody = boolean;
export type PutApiUsedBooksBookIdMutationError = AxiosError<unknown>;

export const usePutApiUsedBooksBookId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiUsedBooksBookId>>,
    TError,
    { bookId: number; data: boolean },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiUsedBooksBookId>>,
  TError,
  { bookId: number; data: boolean },
  TContext
> => {
  const mutationOptions = getPutApiUsedBooksBookIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const patchApiUsedBooksId = (
  id: number,
  patchApiUsedBooksIdBody: PatchApiUsedBooksIdBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  const formData = new FormData();
  if (patchApiUsedBooksIdBody.Price !== undefined) {
    formData.append("Price", patchApiUsedBooksIdBody.Price.toString());
  }
  if (patchApiUsedBooksIdBody.ImageFile !== undefined) {
    formData.append("ImageFile", patchApiUsedBooksIdBody.ImageFile);
  }

  return axios.patch(`/api/UsedBooks/${id}`, formData, options);
};

export const getPatchApiUsedBooksIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiUsedBooksId>>,
    TError,
    { id: number; data: PatchApiUsedBooksIdBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchApiUsedBooksId>>,
  TError,
  { id: number; data: PatchApiUsedBooksIdBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchApiUsedBooksId>>,
    { id: number; data: PatchApiUsedBooksIdBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchApiUsedBooksId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchApiUsedBooksIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchApiUsedBooksId>>
>;
export type PatchApiUsedBooksIdMutationBody = PatchApiUsedBooksIdBody;
export type PatchApiUsedBooksIdMutationError = AxiosError<unknown>;

export const usePatchApiUsedBooksId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiUsedBooksId>>,
    TError,
    { id: number; data: PatchApiUsedBooksIdBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchApiUsedBooksId>>,
  TError,
  { id: number; data: PatchApiUsedBooksIdBody },
  TContext
> => {
  const mutationOptions = getPatchApiUsedBooksIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiUsedBooksId = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/api/UsedBooks/${id}`, options);
};

export const getDeleteApiUsedBooksIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiUsedBooksId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiUsedBooksId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiUsedBooksId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiUsedBooksId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiUsedBooksIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiUsedBooksId>>
>;

export type DeleteApiUsedBooksIdMutationError = AxiosError<unknown>;

export const useDeleteApiUsedBooksId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiUsedBooksId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiUsedBooksId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiUsedBooksIdMutationOptions(options);

  return useMutation(mutationOptions);
};
