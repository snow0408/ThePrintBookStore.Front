/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * BackendForFrontend
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'

axios.defaults.baseURL = "https://localhost:7236";
export type GetApiOrderParams = {
  orderId?: number;
};

export type GetApiLinePayCancelParams = {
  transactionId?: string;
};

export type PostApiLinePayConfirmParams = {
  transactionId?: string;
  orderId?: string;
};

export type PutApiCartsDetailsIdParams = {
  quantity?: number;
};

export type PostApiCartsDetailsParams = {
  memberId?: number;
  productId?: number;
};

export type GetApiCartsDetailsParams = {
  Id?: number;
};

export type PutTotalAmountIdParams = {
  totalAmount?: number;
};

export interface WriteBookReview {
  book?: Product;
  bookID?: number;
  id?: number;
  member?: Member;
  memberID?: number;
  reviewContent: string;
  reviewDate?: string;
  reviewRating?: number;
}

export interface UsedBooksOrderDetail {
  book?: UsedBook;
  bookID?: number;
  id?: number;
  order?: UsedBooksOrder;
  orderID?: number;
  unitPrice?: number;
}

export interface UsedBooksLogisticsOrder {
  actualDeliveryDate?: string | null;
  estimateDeliveryDate?: string;
  id?: number;
  logisticsCompany: string;
  order?: UsedBooksOrder;
  orderID?: number;
  pickupMethod: string;
  recipientAddress: string;
  recipientName: string;
  recipientPhone: string;
  senderAddress: string;
  senderName: string;
  senderPhone: string;
  trackingNumber: string;
}

export interface UsedBooksAllocationRecord {
  allocationAccount: string;
  allocationAmount?: number;
  id?: number;
  member?: Member;
  memberID?: number;
  order?: UsedBooksOrder;
  orderID?: number;
  platformShareAmount?: number;
}

export interface UsedBookPaymentRecord {
  id?: number;
  order?: UsedBooksOrder;
  orderId?: number;
  paymentNumber?: number;
}

export interface UsedBooksOrder {
  buyer?: Member;
  buyerId?: number;
  id?: number;
  orderDate?: string;
  paymentMethod?: string | null;
  seller?: Member;
  sellerId?: number;
  shippingFee?: number;
  status: string;
  totalAmount?: number;
  usedBookPaymentRecords?: UsedBookPaymentRecord[] | null;
  usedBooksAllocationRecords?: UsedBooksAllocationRecord[] | null;
  usedBooksLogisticsOrders?: UsedBooksLogisticsOrder[] | null;
  usedBooksOrderDetails?: UsedBooksOrderDetail[] | null;
}

export interface UsedBook {
  authors?: string | null;
  bookStatus: string;
  category?: Category;
  categoryId?: number;
  description?: string | null;
  id?: number;
  isbn: string;
  isDeleted?: boolean;
  member?: Member;
  memberId?: number;
  name: string;
  picture?: string | null;
  price?: number;
  productStatus?: boolean;
  publishDate?: string | null;
  publisherName?: string | null;
  releaseDate?: string;
  smallPicture?: string | null;
  smallThumbnailPicture?: string | null;
  thumbnailPicture?: string | null;
  usedBooksCarts?: UsedBooksCart[] | null;
  usedBooksOrderDetails?: UsedBooksOrderDetail[] | null;
  webReaderLink?: string | null;
}

export interface UsedBooksCart {
  addToCartDate?: string;
  book?: UsedBook;
  bookID?: number;
  id?: number;
  member?: Member;
  memberID?: number;
}

export interface ShippingAddressRecipientDto {
  email?: string | null;
  firstName?: string | null;
  firstNameOptional?: string | null;
  lastName?: string | null;
  lastNameOptional?: string | null;
  phoneNo?: string | null;
  type?: string | null;
}

export interface ShippingAddressDto {
  city?: string | null;
  country?: string | null;
  detail?: string | null;
  optional?: string | null;
  postalCode?: string | null;
  recipient?: ShippingAddressRecipientDto;
  state?: string | null;
}

export interface Return {
  id?: number;
  logisticsOrder?: LogisticsOrder;
  logisticsOrderId?: number;
  member?: Member;
  memberId?: number;
  order?: Order;
  orderId?: number;
  processdDate?: string;
  quantity?: number;
  returnDate?: string;
  returnReason: string;
  status: string;
}

export interface ResponsePaymentUrlDto {
  app?: string | null;
  web?: string | null;
}

export interface ResponseInfoDto {
  paymentAccessToken?: string | null;
  paymentUrl?: ResponsePaymentUrlDto;
  transactionId?: number;
}

export interface Refund {
  amount?: number;
  applicationDate?: string;
  id?: number;
  order?: Order;
  orderId?: number;
  refundStatus: string;
}

export interface RedirectUrlsDto {
  cancelUrl?: string | null;
  confirmUrl?: string | null;
}

export interface Product {
  analyzeOneBooks?: AnalyzeOneBook[] | null;
  analyzeSales?: AnalyzeSale[] | null;
  analyzeUserInteractions?: AnalyzeUserInteraction[] | null;
  bookProducts?: BookProduct[] | null;
  cartDetails?: CartDetail[] | null;
  category: string;
  description: string;
  detailsCategory?: ProductDetailsCategory;
  detailsCategoryId?: number | null;
  discountDegree?: number | null;
  eBooks?: EBook[] | null;
  id?: number;
  name: string;
  offer?: number | null;
  orderDetails?: OrderDetail[] | null;
  pdInStocks?: PdInStock[] | null;
  price?: number;
  productKeywords?: ProductKeyword[] | null;
  productPictures?: ProductPicture[] | null;
  productStatus: string;
  qtyBookInventories?: QtyBookInventory[] | null;
  qtyflawBooks?: QtyflawBook[] | null;
  realPrice?: number | null;
  stock?: number;
  writeBookReviews?: WriteBookReview[] | null;
}

export interface QtyflawBook {
  book?: Product;
  bookID?: number;
  handler: string;
  handlingDate?: string;
  handlingMethod: string;
  id?: number;
  reason: string;
  status: string;
}

export interface QtyBookInventory {
  buyPrice?: number;
  id?: number;
  product?: Product;
  productId?: number;
  remark?: string | null;
  state: string;
  totalQty?: number;
}

export interface ProductPicture {
  displayOrder?: number;
  id?: number;
  name: string;
  product?: Product;
  productId?: number;
}

export interface ProductKeyword {
  id?: number;
  keyword?: Keyword;
  keywordId?: number;
  product?: Product;
  productId?: number;
}

export interface ProductDetailsCategory {
  discountDegree?: number | null;
  id?: number;
  name: string;
  products?: Product[] | null;
}

export interface PointsHistory {
  changeDate?: string;
  changeReason: string;
  id?: number;
  member?: Member;
  memberId?: number;
  pointChange?: number;
}

export interface PdInStock {
  buyDate?: string;
  buyPrice?: number;
  id?: number;
  product?: Product;
  productId?: number;
  qty?: number;
  supplier?: Bookseller;
  supplierID?: number | null;
}

export interface PaymentResponseDto {
  info?: ResponseInfoDto;
  returnCode?: string | null;
  returnMessage?: string | null;
}

export interface PaymentRequestDto {
  amount?: number;
  currency?: string | null;
  orderId?: string | null;
  packages?: PackageDto[] | null;
  redirectUrls?: RedirectUrlsDto;
}

export interface PaymentConfirmResponseDto {
  info?: ConfirmResponseInfoDto;
  returnCode?: string | null;
  returnMessage?: string | null;
}

export interface PaymentConfirmDto {
  amount?: number;
  currency?: string | null;
}

export interface PackageDto {
  amount?: number;
  id?: string | null;
  name?: string | null;
  products?: LinePayProductDto[] | null;
}

export interface OrdersDto {
  address?: string | null;
  discountAmount?: number | null;
  id?: number | null;
  memberId?: number;
  memberName?: string | null;
  message?: string | null;
  orderDate?: string;
  paymentMethod?: string | null;
  phone?: string | null;
  status?: string | null;
  totalAmount?: number;
}

export interface OrderDetailsDto {
  orderId?: number | null;
  price?: number | null;
  productId?: number;
  productName?: string | null;
  quantity?: number;
  unitPrice?: number;
}

export interface OrderDetail {
  id?: number;
  order?: Order;
  orderId?: number;
  product?: Product;
  productId?: number;
  quantity?: number;
  unitPrice?: number;
}

export interface OrderCreationDto {
  orderDetailsDto?: CartDetailsDto[] | null;
  ordersDto?: OrdersDto;
}

export interface LogisticsOrder {
  actualDeliveryDate?: string;
  estimatedDeliveryDate?: string;
  id?: number;
  order?: Order;
  orderId?: number;
  recipientAddress: string;
  recipientName: string;
  recipientPhone: string;
  returns?: Return[] | null;
  trackingNumber: string;
}

export interface LinePayProductDto {
  name?: string | null;
  price?: number;
  quantity?: number;
}

export interface Keyword {
  id?: number;
  name: string;
  productKeywords?: ProductKeyword[] | null;
}

export interface Favorite {
  favoriteID?: number;
  itemID?: number | null;
  member?: Member;
  memberID?: number | null;
}

export interface EBook {
  eBooksPermissions?: EBooksPermission[] | null;
  fileLink: string;
  id?: number;
  product?: Product;
  productId?: number;
  sample: string;
}

export interface EBooksPermission {
  book?: EBook;
  bookID?: number;
  createDate?: string;
  id?: number;
  member?: Member;
  memberID?: number;
  permissionType?: string | null;
}

export interface Member {
  address: string;
  analyzeUserInteractions?: AnalyzeUserInteraction[] | null;
  bookReviews?: BookReview[] | null;
  cart?: Cart;
  createdAt?: string;
  dateOfBirth?: string;
  eBooksPermissions?: EBooksPermission[] | null;
  email: string;
  emailVerified?: boolean;
  favorites?: Favorite[] | null;
  gender?: boolean;
  id?: number;
  membersLevel: string;
  name: string;
  orders?: Order[] | null;
  password: string;
  phoneNumber: string;
  points?: number;
  pointsHistories?: PointsHistory[] | null;
  resetToken?: string | null;
  resetTokenExpiration?: string | null;
  returns?: Return[] | null;
  usedBooks?: UsedBook[] | null;
  usedBooksAllocationRecords?: UsedBooksAllocationRecord[] | null;
  usedBooksCarts?: UsedBooksCart[] | null;
  usedBooksOrderBuyers?: UsedBooksOrder[] | null;
  usedBooksOrderSellers?: UsedBooksOrder[] | null;
  verificationCode?: string | null;
  verificationCodeExpiration?: number | null;
  writeBookReviews?: WriteBookReview[] | null;
}

export interface Order {
  address?: string | null;
  discountAmount?: number | null;
  id?: number;
  logisticsOrders?: LogisticsOrder[] | null;
  member?: Member;
  memberId?: number;
  message?: string | null;
  orderDate?: string;
  orderDetails?: OrderDetail[] | null;
  paymentMethod: string;
  phone?: string | null;
  refunds?: Refund[] | null;
  returns?: Return[] | null;
  status: string;
  totalAmount?: number;
}

export interface ConfirmResponseShippingOptionsDto {
  address?: ShippingAddressDto;
  feeAmount?: number;
  methodId?: string | null;
}

export interface ConfirmResponsePackageDto {
  amount?: number;
  id?: string | null;
  userFeeAmount?: number;
}

export interface ConfirmResponsePayInfoDto {
  amount?: number;
  creditCardBrand?: string | null;
  creditCardNickname?: string | null;
  maskedCreditCardNumber?: string | null;
  method?: string | null;
  packages?: ConfirmResponsePackageDto[] | null;
  shipping?: ConfirmResponseShippingOptionsDto;
}

export interface ConfirmResponseInfoDto {
  authorizationExpireDate?: string | null;
  orderId?: string | null;
  payInfo?: ConfirmResponsePayInfoDto[] | null;
  regKey?: string | null;
  transactionId?: number;
}

export interface CartsDto {
  address?: string | null;
  discountAmount?: number | null;
  id?: number;
  memberId?: number;
  memberName?: string | null;
  message?: string | null;
  paymentMethod?: string | null;
  phone?: number;
  totalAmount?: number;
}

export interface CartDetailsDto {
  cartId?: number;
  id?: number | null;
  productId?: number | null;
  productName?: string | null;
  quantity?: number;
  unitPrice?: number;
}

export interface Cart {
  address: string;
  cartDetails?: CartDetail[] | null;
  discountAmount?: number | null;
  id?: number;
  member?: Member;
  memberId?: number;
  message?: string | null;
  phone?: number;
  totalAmount?: number;
}

export interface CartDetail {
  cart?: Cart;
  cartId?: number;
  id?: number;
  product?: Product;
  productId?: number | null;
  quantity?: number;
  unitPrice?: number;
}

export interface Bookseller {
  address: string;
  bankAccount?: string | null;
  bookProducts?: BookProduct[] | null;
  compiled?: number | null;
  contactPerson: string;
  id?: number;
  name: string;
  pdInStocks?: PdInStock[] | null;
  phone: string;
}

export interface BookReview {
  content: string;
  isSpoiler?: boolean;
  member?: Member;
  memberID?: number;
  rating?: string | null;
  reviewID?: number;
  reviewTime?: string;
}

export interface Book {
  author: string;
  bookPreviews?: BookPreview[] | null;
  bookProducts?: BookProduct[] | null;
  category?: Category;
  categoryID?: number;
  id?: number;
  language: string;
  name: string;
}

export interface Category {
  books?: Book[] | null;
  discountDegree?: number | null;
  displayOrder?: number;
  id?: number;
  name: string;
  usedBooks?: UsedBook[] | null;
}

export interface BookProduct {
  book?: Book;
  bookId?: number;
  id?: number;
  isbn: string;
  product?: Product;
  productId?: number;
  publishDate?: string;
  publisher?: Bookseller;
  publisherId?: number;
}

export interface BookPreview {
  available?: boolean | null;
  book?: Book;
  bookId?: number;
  previewContent?: string | null;
  previewId?: number;
  previewLength?: number | null;
  previewType?: string | null;
  previewURL?: string | null;
}

export interface AnalyzeUserInteraction {
  book?: Product;
  bookID?: number;
  id?: number;
  interactionDate?: string;
  interactionType: string;
  member?: Member;
  memberID?: number;
}

export interface AnalyzeSale {
  book?: Product;
  bookID?: number;
  dateRange?: number;
  id?: number;
  quantity?: number;
  total?: number;
}

export interface AnalyzeOneBook {
  book?: Product;
  bookID?: number;
  dateRange?: number;
  id?: number;
  quantity?: number;
  salesAmount?: number;
}



type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;



export const getApiCartsMemberId = (
  memberId: number, options?: AxiosRequestConfig
): Promise<AxiosResponse<CartsDto>> => {

  return axios.get(
    `/api/Carts/${memberId}`, options
  );
}


export const getGetApiCartsMemberIdQueryKey = (memberId: number,) => {
  return [`/api/Carts/${memberId}`] as const;
}


export const getGetApiCartsMemberIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiCartsMemberId>>, TError = AxiosError<unknown>>(memberId: number, options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getApiCartsMemberId>>, TError, TData>, axios?: AxiosRequestConfig }
) => {

  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiCartsMemberIdQueryKey(memberId);



  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCartsMemberId>>> = ({ signal }) => getApiCartsMemberId(memberId, { signal, ...axiosOptions });





  return { queryKey, queryFn, enabled: !!(memberId), ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getApiCartsMemberId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiCartsMemberIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCartsMemberId>>>
export type GetApiCartsMemberIdQueryError = AxiosError<unknown>

export const useGetApiCartsMemberId = <TData = Awaited<ReturnType<typeof getApiCartsMemberId>>, TError = AxiosError<unknown>>(
  memberId: number, options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getApiCartsMemberId>>, TError, TData>, axios?: AxiosRequestConfig }

): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiCartsMemberIdQueryOptions(memberId, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}




export const postApiCarts = (
  cartsDto: CartsDto, options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {

  return axios.post(
    `/api/Carts`,
    cartsDto, options
  );
}



export const getPostApiCartsMutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiCarts>>, TError, { data: CartsDto }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof postApiCarts>>, TError, { data: CartsDto }, TContext> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiCarts>>, { data: CartsDto }> = (props) => {
    const { data } = props ?? {};

    return postApiCarts(data, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type PostApiCartsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiCarts>>>
export type PostApiCartsMutationBody = CartsDto
export type PostApiCartsMutationError = AxiosError<unknown>

export const usePostApiCarts = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiCarts>>, TError, { data: CartsDto }, TContext>, axios?: AxiosRequestConfig }
  ) => {

  const mutationOptions = getPostApiCartsMutationOptions(options);

  return useMutation(mutationOptions);
}

export const putTotalAmountId = (
  id: number,
  params?: PutTotalAmountIdParams, options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {

  return axios.put(
    `/totalAmount/${id}`, undefined, {
    ...options,
    params: { ...params, ...options?.params },
  }
  );
}



export const getPutTotalAmountIdMutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof putTotalAmountId>>, TError, { id: number; params?: PutTotalAmountIdParams }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof putTotalAmountId>>, TError, { id: number; params?: PutTotalAmountIdParams }, TContext> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTotalAmountId>>, { id: number; params?: PutTotalAmountIdParams }> = (props) => {
    const { id, params } = props ?? {};

    return putTotalAmountId(id, params, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type PutTotalAmountIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTotalAmountId>>>

export type PutTotalAmountIdMutationError = AxiosError<unknown>

export const usePutTotalAmountId = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof putTotalAmountId>>, TError, { id: number; params?: PutTotalAmountIdParams }, TContext>, axios?: AxiosRequestConfig }
  ) => {

  const mutationOptions = getPutTotalAmountIdMutationOptions(options);

  return useMutation(mutationOptions);
}

export const putApiCartsId = (
  id: number,
  cart: Cart, options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {

  return axios.put(
    `/api/Carts/${id}`,
    cart, options
  );
}



export const getPutApiCartsIdMutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof putApiCartsId>>, TError, { id: number; data: Cart }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof putApiCartsId>>, TError, { id: number; data: Cart }, TContext> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiCartsId>>, { id: number; data: Cart }> = (props) => {
    const { id, data } = props ?? {};

    return putApiCartsId(id, data, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type PutApiCartsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiCartsId>>>
export type PutApiCartsIdMutationBody = Cart
export type PutApiCartsIdMutationError = AxiosError<unknown>

export const usePutApiCartsId = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof putApiCartsId>>, TError, { id: number; data: Cart }, TContext>, axios?: AxiosRequestConfig }
  ) => {

  const mutationOptions = getPutApiCartsIdMutationOptions(options);

  return useMutation(mutationOptions);
}

export const deleteApiCartsId = (
  id: number, options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {

  return axios.delete(
    `/api/Carts/${id}`, options
  );
}



export const getDeleteApiCartsIdMutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteApiCartsId>>, TError, { id: number }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof deleteApiCartsId>>, TError, { id: number }, TContext> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiCartsId>>, { id: number }> = (props) => {
    const { id } = props ?? {};

    return deleteApiCartsId(id, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type DeleteApiCartsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiCartsId>>>

export type DeleteApiCartsIdMutationError = AxiosError<unknown>

export const useDeleteApiCartsId = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteApiCartsId>>, TError, { id: number }, TContext>, axios?: AxiosRequestConfig }
  ) => {

  const mutationOptions = getDeleteApiCartsIdMutationOptions(options);

  return useMutation(mutationOptions);
}

export const getApiCartsDetails = (
  params?: GetApiCartsDetailsParams, options?: AxiosRequestConfig
): Promise<AxiosResponse<CartDetailsDto[]>> => {

  return axios.get(
    `/api/CartsDetails`, {
    ...options,
    params: { ...params, ...options?.params },
  }
  );
}


export const getGetApiCartsDetailsQueryKey = (params?: GetApiCartsDetailsParams,) => {
  return [`/api/CartsDetails`, ...(params ? [params] : [])] as const;
}


export const getGetApiCartsDetailsQueryOptions = <TData = Awaited<ReturnType<typeof getApiCartsDetails>>, TError = AxiosError<unknown>>(params?: GetApiCartsDetailsParams, options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getApiCartsDetails>>, TError, TData>, axios?: AxiosRequestConfig }
) => {

  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiCartsDetailsQueryKey(params);



  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCartsDetails>>> = ({ signal }) => getApiCartsDetails(params, { signal, ...axiosOptions });





  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getApiCartsDetails>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiCartsDetailsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCartsDetails>>>
export type GetApiCartsDetailsQueryError = AxiosError<unknown>

export const useGetApiCartsDetails = <TData = Awaited<ReturnType<typeof getApiCartsDetails>>, TError = AxiosError<unknown>>(
  params?: GetApiCartsDetailsParams, options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getApiCartsDetails>>, TError, TData>, axios?: AxiosRequestConfig }

): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiCartsDetailsQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}




export const postApiCartsDetails = (
  params?: PostApiCartsDetailsParams, options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {

  return axios.post(
    `/api/CartsDetails`, undefined, {
    ...options,
    params: { ...params, ...options?.params },
  }
  );
}



export const getPostApiCartsDetailsMutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiCartsDetails>>, TError, { params?: PostApiCartsDetailsParams }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof postApiCartsDetails>>, TError, { params?: PostApiCartsDetailsParams }, TContext> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiCartsDetails>>, { params?: PostApiCartsDetailsParams }> = (props) => {
    const { params } = props ?? {};

    return postApiCartsDetails(params, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type PostApiCartsDetailsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiCartsDetails>>>

export type PostApiCartsDetailsMutationError = AxiosError<unknown>

export const usePostApiCartsDetails = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiCartsDetails>>, TError, { params?: PostApiCartsDetailsParams }, TContext>, axios?: AxiosRequestConfig }
  ) => {

  const mutationOptions = getPostApiCartsDetailsMutationOptions(options);

  return useMutation(mutationOptions);
}

export const putApiCartsDetailsId = (
  id: number,
  params?: PutApiCartsDetailsIdParams, options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {

  return axios.put(
    `/api/CartsDetails/${id}`, undefined, {
    ...options,
    params: { ...params, ...options?.params },
  }
  );
}



export const getPutApiCartsDetailsIdMutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof putApiCartsDetailsId>>, TError, { id: number; params?: PutApiCartsDetailsIdParams }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof putApiCartsDetailsId>>, TError, { id: number; params?: PutApiCartsDetailsIdParams }, TContext> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiCartsDetailsId>>, { id: number; params?: PutApiCartsDetailsIdParams }> = (props) => {
    const { id, params } = props ?? {};

    return putApiCartsDetailsId(id, params, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type PutApiCartsDetailsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiCartsDetailsId>>>

export type PutApiCartsDetailsIdMutationError = AxiosError<unknown>

export const usePutApiCartsDetailsId = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof putApiCartsDetailsId>>, TError, { id: number; params?: PutApiCartsDetailsIdParams }, TContext>, axios?: AxiosRequestConfig }
  ) => {

  const mutationOptions = getPutApiCartsDetailsIdMutationOptions(options);

  return useMutation(mutationOptions);
}

export const deleteApiCartsDetailsId = (
  id: number, options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {

  return axios.delete(
    `/api/CartsDetails/${id}`, options
  );
}



export const getDeleteApiCartsDetailsIdMutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteApiCartsDetailsId>>, TError, { id: number }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof deleteApiCartsDetailsId>>, TError, { id: number }, TContext> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiCartsDetailsId>>, { id: number }> = (props) => {
    const { id } = props ?? {};

    return deleteApiCartsDetailsId(id, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type DeleteApiCartsDetailsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiCartsDetailsId>>>

export type DeleteApiCartsDetailsIdMutationError = AxiosError<unknown>

export const useDeleteApiCartsDetailsId = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteApiCartsDetailsId>>, TError, { id: number }, TContext>, axios?: AxiosRequestConfig }
  ) => {

  const mutationOptions = getDeleteApiCartsDetailsIdMutationOptions(options);

  return useMutation(mutationOptions);
}

export const postApiLinePayCreate = (
  paymentRequestDto: PaymentRequestDto, options?: AxiosRequestConfig
): Promise<AxiosResponse<PaymentResponseDto>> => {

  return axios.post(
    `/api/LinePay/Create`,
    paymentRequestDto, options
  );
}



export const getPostApiLinePayCreateMutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiLinePayCreate>>, TError, { data: PaymentRequestDto }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof postApiLinePayCreate>>, TError, { data: PaymentRequestDto }, TContext> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiLinePayCreate>>, { data: PaymentRequestDto }> = (props) => {
    const { data } = props ?? {};

    return postApiLinePayCreate(data, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type PostApiLinePayCreateMutationResult = NonNullable<Awaited<ReturnType<typeof postApiLinePayCreate>>>
export type PostApiLinePayCreateMutationBody = PaymentRequestDto
export type PostApiLinePayCreateMutationError = AxiosError<unknown>

export const usePostApiLinePayCreate = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiLinePayCreate>>, TError, { data: PaymentRequestDto }, TContext>, axios?: AxiosRequestConfig }
  ) => {

  const mutationOptions = getPostApiLinePayCreateMutationOptions(options);

  return useMutation(mutationOptions);
}

export const postApiLinePayConfirm = (
  paymentConfirmDto: PaymentConfirmDto,
  params?: PostApiLinePayConfirmParams, options?: AxiosRequestConfig
): Promise<AxiosResponse<PaymentConfirmResponseDto>> => {

  return axios.post(
    `/api/LinePay/Confirm`,
    paymentConfirmDto, {
    ...options,
    params: { ...params, ...options?.params },
  }
  );
}



export const getPostApiLinePayConfirmMutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiLinePayConfirm>>, TError, { data: PaymentConfirmDto; params?: PostApiLinePayConfirmParams }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof postApiLinePayConfirm>>, TError, { data: PaymentConfirmDto; params?: PostApiLinePayConfirmParams }, TContext> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiLinePayConfirm>>, { data: PaymentConfirmDto; params?: PostApiLinePayConfirmParams }> = (props) => {
    const { data, params } = props ?? {};

    return postApiLinePayConfirm(data, params, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type PostApiLinePayConfirmMutationResult = NonNullable<Awaited<ReturnType<typeof postApiLinePayConfirm>>>
export type PostApiLinePayConfirmMutationBody = PaymentConfirmDto
export type PostApiLinePayConfirmMutationError = AxiosError<unknown>

export const usePostApiLinePayConfirm = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiLinePayConfirm>>, TError, { data: PaymentConfirmDto; params?: PostApiLinePayConfirmParams }, TContext>, axios?: AxiosRequestConfig }
  ) => {

  const mutationOptions = getPostApiLinePayConfirmMutationOptions(options);

  return useMutation(mutationOptions);
}

export const getApiLinePayCancel = (
  params?: GetApiLinePayCancelParams, options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {

  return axios.get(
    `/api/LinePay/Cancel`, {
    ...options,
    params: { ...params, ...options?.params },
  }
  );
}


export const getGetApiLinePayCancelQueryKey = (params?: GetApiLinePayCancelParams,) => {
  return [`/api/LinePay/Cancel`, ...(params ? [params] : [])] as const;
}


export const getGetApiLinePayCancelQueryOptions = <TData = Awaited<ReturnType<typeof getApiLinePayCancel>>, TError = AxiosError<unknown>>(params?: GetApiLinePayCancelParams, options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getApiLinePayCancel>>, TError, TData>, axios?: AxiosRequestConfig }
) => {

  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiLinePayCancelQueryKey(params);



  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLinePayCancel>>> = ({ signal }) => getApiLinePayCancel(params, { signal, ...axiosOptions });





  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getApiLinePayCancel>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiLinePayCancelQueryResult = NonNullable<Awaited<ReturnType<typeof getApiLinePayCancel>>>
export type GetApiLinePayCancelQueryError = AxiosError<unknown>

export const useGetApiLinePayCancel = <TData = Awaited<ReturnType<typeof getApiLinePayCancel>>, TError = AxiosError<unknown>>(
  params?: GetApiLinePayCancelParams, options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getApiLinePayCancel>>, TError, TData>, axios?: AxiosRequestConfig }

): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiLinePayCancelQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}




export const getApiOrder = (
  params?: GetApiOrderParams, options?: AxiosRequestConfig
): Promise<AxiosResponse<OrdersDto>> => {

  return axios.get(
    `/api/Order`, {
    ...options,
    params: { ...params, ...options?.params },
  }
  );
}


export const getGetApiOrderQueryKey = (params?: GetApiOrderParams,) => {
  return [`/api/Order`, ...(params ? [params] : [])] as const;
}


export const getGetApiOrderQueryOptions = <TData = Awaited<ReturnType<typeof getApiOrder>>, TError = AxiosError<unknown>>(params?: GetApiOrderParams, options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getApiOrder>>, TError, TData>, axios?: AxiosRequestConfig }
) => {

  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOrderQueryKey(params);



  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOrder>>> = ({ signal }) => getApiOrder(params, { signal, ...axiosOptions });





  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getApiOrder>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiOrderQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOrder>>>
export type GetApiOrderQueryError = AxiosError<unknown>

export const useGetApiOrder = <TData = Awaited<ReturnType<typeof getApiOrder>>, TError = AxiosError<unknown>>(
  params?: GetApiOrderParams, options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getApiOrder>>, TError, TData>, axios?: AxiosRequestConfig }

): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiOrderQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}




export const postApiOrder = (
  orderCreationDto: OrderCreationDto, options?: AxiosRequestConfig
): Promise<AxiosResponse<number>> => {

  return axios.post(
    `/api/Order`,
    orderCreationDto, options
  );
}



export const getPostApiOrderMutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiOrder>>, TError, { data: OrderCreationDto }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof postApiOrder>>, TError, { data: OrderCreationDto }, TContext> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiOrder>>, { data: OrderCreationDto }> = (props) => {
    const { data } = props ?? {};

    return postApiOrder(data, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type PostApiOrderMutationResult = NonNullable<Awaited<ReturnType<typeof postApiOrder>>>
export type PostApiOrderMutationBody = OrderCreationDto
export type PostApiOrderMutationError = AxiosError<unknown>

export const usePostApiOrder = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiOrder>>, TError, { data: OrderCreationDto }, TContext>, axios?: AxiosRequestConfig }
  ) => {

  const mutationOptions = getPostApiOrderMutationOptions(options);

  return useMutation(mutationOptions);
}

export const getApiOrderMemberId = (
  memberId: number, options?: AxiosRequestConfig
): Promise<AxiosResponse<OrdersDto[]>> => {

  return axios.get(
    `/api/Order/${memberId}`, options
  );
}


export const getGetApiOrderMemberIdQueryKey = (memberId: number,) => {
  return [`/api/Order/${memberId}`] as const;
}


export const getGetApiOrderMemberIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiOrderMemberId>>, TError = AxiosError<unknown>>(memberId: number, options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getApiOrderMemberId>>, TError, TData>, axios?: AxiosRequestConfig }
) => {

  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOrderMemberIdQueryKey(memberId);



  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOrderMemberId>>> = ({ signal }) => getApiOrderMemberId(memberId, { signal, ...axiosOptions });





  return { queryKey, queryFn, enabled: !!(memberId), ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getApiOrderMemberId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiOrderMemberIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOrderMemberId>>>
export type GetApiOrderMemberIdQueryError = AxiosError<unknown>

export const useGetApiOrderMemberId = <TData = Awaited<ReturnType<typeof getApiOrderMemberId>>, TError = AxiosError<unknown>>(
  memberId: number, options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getApiOrderMemberId>>, TError, TData>, axios?: AxiosRequestConfig }

): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiOrderMemberIdQueryOptions(memberId, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}




export const putApiOrderId = (
  id: number,
  order: Order, options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {

  return axios.put(
    `/api/Order/${id}`,
    order, options
  );
}



export const getPutApiOrderIdMutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof putApiOrderId>>, TError, { id: number; data: Order }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof putApiOrderId>>, TError, { id: number; data: Order }, TContext> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiOrderId>>, { id: number; data: Order }> = (props) => {
    const { id, data } = props ?? {};

    return putApiOrderId(id, data, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type PutApiOrderIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiOrderId>>>
export type PutApiOrderIdMutationBody = Order
export type PutApiOrderIdMutationError = AxiosError<unknown>

export const usePutApiOrderId = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof putApiOrderId>>, TError, { id: number; data: Order }, TContext>, axios?: AxiosRequestConfig }
  ) => {

  const mutationOptions = getPutApiOrderIdMutationOptions(options);

  return useMutation(mutationOptions);
}

export const getApiOrdersDetailsId = (
  id: number, options?: AxiosRequestConfig
): Promise<AxiosResponse<OrderDetailsDto[]>> => {

  return axios.get(
    `/api/OrdersDetails/${id}`, options
  );
}


export const getGetApiOrdersDetailsIdQueryKey = (id: number,) => {
  return [`/api/OrdersDetails/${id}`] as const;
}


export const getGetApiOrdersDetailsIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiOrdersDetailsId>>, TError = AxiosError<unknown>>(id: number, options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersDetailsId>>, TError, TData>, axios?: AxiosRequestConfig }
) => {

  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiOrdersDetailsIdQueryKey(id);



  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOrdersDetailsId>>> = ({ signal }) => getApiOrdersDetailsId(id, { signal, ...axiosOptions });





  return { queryKey, queryFn, enabled: !!(id), ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersDetailsId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiOrdersDetailsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOrdersDetailsId>>>
export type GetApiOrdersDetailsIdQueryError = AxiosError<unknown>

export const useGetApiOrdersDetailsId = <TData = Awaited<ReturnType<typeof getApiOrdersDetailsId>>, TError = AxiosError<unknown>>(
  id: number, options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersDetailsId>>, TError, TData>, axios?: AxiosRequestConfig }

): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiOrdersDetailsIdQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}




export const postApiOrdersDetails = (
  orderDetailsDto: OrderDetailsDto, options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {

  return axios.post(
    `/api/OrdersDetails`,
    orderDetailsDto, options
  );
}



export const getPostApiOrdersDetailsMutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiOrdersDetails>>, TError, { data: OrderDetailsDto }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof postApiOrdersDetails>>, TError, { data: OrderDetailsDto }, TContext> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiOrdersDetails>>, { data: OrderDetailsDto }> = (props) => {
    const { data } = props ?? {};

    return postApiOrdersDetails(data, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type PostApiOrdersDetailsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiOrdersDetails>>>
export type PostApiOrdersDetailsMutationBody = OrderDetailsDto
export type PostApiOrdersDetailsMutationError = AxiosError<unknown>

export const usePostApiOrdersDetails = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiOrdersDetails>>, TError, { data: OrderDetailsDto }, TContext>, axios?: AxiosRequestConfig }
  ) => {

  const mutationOptions = getPostApiOrdersDetailsMutationOptions(options);

  return useMutation(mutationOptions);
}

export const putApiOrdersDetailsId = (
  id: number,
  orderDetail: OrderDetail, options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {

  return axios.put(
    `/api/OrdersDetails/${id}`,
    orderDetail, options
  );
}



export const getPutApiOrdersDetailsIdMutationOptions = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof putApiOrdersDetailsId>>, TError, { id: number; data: OrderDetail }, TContext>, axios?: AxiosRequestConfig }
  ): UseMutationOptions<Awaited<ReturnType<typeof putApiOrdersDetailsId>>, TError, { id: number; data: OrderDetail }, TContext> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};




  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiOrdersDetailsId>>, { id: number; data: OrderDetail }> = (props) => {
    const { id, data } = props ?? {};

    return putApiOrdersDetailsId(id, data, axiosOptions)
  }




  return { mutationFn, ...mutationOptions }
}

export type PutApiOrdersDetailsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiOrdersDetailsId>>>
export type PutApiOrdersDetailsIdMutationBody = OrderDetail
export type PutApiOrdersDetailsIdMutationError = AxiosError<unknown>

export const usePutApiOrdersDetailsId = <TError = AxiosError<unknown>,
  TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof putApiOrdersDetailsId>>, TError, { id: number; data: OrderDetail }, TContext>, axios?: AxiosRequestConfig }
  ) => {

  const mutationOptions = getPutApiOrdersDetailsIdMutationOptions(options);

  return useMutation(mutationOptions);
}

